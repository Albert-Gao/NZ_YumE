{"version":3,"sources":["webpack:///spec/test.spec.js","webpack:///webpack/bootstrap bbadabce291b18eb2993?af6f","webpack:///../spec/test.spec.ts","webpack:///./emulator/services/StateService.ts?b70c","webpack:///./emulator/services/TemplatingService.ts?e74f","webpack:///./emulator/services/SystemService.ts?39fd"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","StateService_1","TemplatingService_1","SystemService_1","jasmine","getFixtures","fixturesPath","MockElement","aMockElement","type","name","testText","define","MockPage","page1","rawLayout","page2","pageName","appTitle","MockApp","this","title","currentPageName","startPageName","pages","prototype","injectActionService","as","startAddingPages","CentralCallbackFunc","elementID","myMockApp","describe","testStateService","StateService","it","getStartPageName","expect","toEqual","getCurrentPageName","newName","setCurrentPageName","currentPage","getCurrentPage","page","getPage","undefined","getPages","spyOn","emulatorCentralCallBack","toHaveBeenCalledWith","fn","getAppCallBack","MockStateService","_app","myMockStateService","testTemplatingService","TemplatingService","aJQObject","createPage","$","toExist","toHaveText","createPagesAndSave","calls","count","toBe","createLayout","toHaveClass","setFixtures","removeElementFromDOM","not","aJQItem","createjQueryItem","key","value","toHaveId","MockTemplatingService","document","createElement","className","attrs","styleClasses","text","addClass","myMockTemplatingService","testSystemService","SystemService","removeCurrentPageFromScreen","done","startEmulator","POLL_TIME","endTime","Date","getTime","checkCondition","goStartPage","setTimeout","hideSplashScreen","toHaveBeenCalled","renderAllPages","toBeVisible","showNotification","is","app","returnPage","targetName","_i","_a","length","element","targetElementInfo","stateService","_stateService","_this","outDiv","_loop_1","element1","row","this_1","temp","targetElementID","on","targetText","val","append","temp1","temp2","temp3","label","input","listGroup","listItemsData","_loop_2","item","a","url","h5","description","listItemsData_1","_b","afterRenderLayout","remove","domElement","attrs_1","attr","html","templatingService","_templatingService","goPage","prepend","renewCurrentPage","backgroundDIV","brand","fadeIn","fadeOut","noticeDIV"],"mappings":"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","file":"./spec/test.spec.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar StateService_1 = __webpack_require__(5);\n\tvar TemplatingService_1 = __webpack_require__(6);\n\tvar SystemService_1 = __webpack_require__(7);\n\tjasmine.getFixtures().fixturesPath = \"../spec/\";\n\tvar MockElement = (function () {\n\t    function MockElement() {\n\t    }\n\t    return MockElement;\n\t}());\n\tvar aMockElement = new MockElement();\n\taMockElement.type = \"text\";\n\taMockElement.name = \"testName\";\n\tvar testText = \"Some text to test with\";\n\taMockElement.define = testText;\n\tvar MockPage = (function () {\n\t    function MockPage() {\n\t    }\n\t    return MockPage;\n\t}());\n\tvar page1 = new MockPage();\n\tpage1.name = \"page1\";\n\tpage1.rawLayout = [aMockElement];\n\tvar page2 = new MockPage();\n\tpage2.name = \"page2\";\n\tvar pageName = \"page1\";\n\tvar appTitle = \"Title\";\n\tvar MockApp = (function () {\n\t    function MockApp() {\n\t        this.title = appTitle;\n\t        this.currentPageName = pageName;\n\t        this.startPageName = pageName;\n\t        this.pages = [page1, page2];\n\t    }\n\t    MockApp.prototype.injectActionService = function (as) { };\n\t    ;\n\t    MockApp.prototype.startAddingPages = function () { };\n\t    ;\n\t    MockApp.prototype.CentralCallbackFunc = function (pageName, elementID) { };\n\t    ;\n\t    return MockApp;\n\t}());\n\tvar myMockApp = new MockApp();\n\tdescribe('Tests for StateService', function () {\n\t    var testStateService = new StateService_1.StateService(myMockApp);\n\t    it('getStartPageName() should return the specified string', function () {\n\t        var startPageName = testStateService.getStartPageName();\n\t        expect(startPageName).toEqual(pageName);\n\t    });\n\t    it('getStartPageName() should return a string', function () {\n\t        var currentPageName = testStateService.getCurrentPageName();\n\t        expect(currentPageName).toEqual(pageName);\n\t    });\n\t    it('setCurrentPageName() should set the name of the current page', function () {\n\t        var newName = \"New Name\";\n\t        testStateService.setCurrentPageName(newName);\n\t        var currentPageName = testStateService.getCurrentPageName();\n\t        expect(currentPageName).toEqual(newName);\n\t        testStateService.setCurrentPageName(pageName);\n\t    });\n\t    it(\"getCurrentPage() should return an IPage object of the current page\", function () {\n\t        var currentPage = testStateService.getCurrentPage();\n\t        expect(currentPage.name).toEqual(\"page1\");\n\t    });\n\t    it(\"getPage() should return an IPage object with the specified name\", function () {\n\t        var page = testStateService.getPage(\"page2\");\n\t        expect(page.name).toEqual(\"page2\");\n\t    });\n\t    it(\"getPage() should return undefined if a string that does not match\" +\n\t        \" an existing page name is passed to it\", function () {\n\t        var page = testStateService.getPage(\"page3\");\n\t        expect(page).toEqual(undefined);\n\t    });\n\t    it(\"getPages() should return an array of all the pages the app contains\", function () {\n\t        var pages = testStateService.getPages();\n\t        expect(pages).toEqual([page1, page2]);\n\t    });\n\t    it(\"emulatorCentralCallBack() to call CentralCallbackFunc()\", function () {\n\t        spyOn(myMockApp, 'CentralCallbackFunc');\n\t        testStateService.emulatorCentralCallBack(aMockElement);\n\t        expect(myMockApp.CentralCallbackFunc).toHaveBeenCalledWith(page1.name, \"testName\");\n\t        testStateService.emulatorCentralCallBack(aMockElement, \"test\");\n\t        expect(myMockApp.CentralCallbackFunc).toHaveBeenCalledWith(page1.name, \"testName\", \"test\");\n\t    });\n\t    it(\"getAppCallBack() should return the correct function\", function () {\n\t        var fn = testStateService.getAppCallBack();\n\t        expect(fn(\"test\", \"test\")).toEqual(myMockApp.CentralCallbackFunc(\"test\", \"test\"));\n\t    });\n\t});\n\tvar MockStateService = (function () {\n\t    function MockStateService() {\n\t        this._app = myMockApp;\n\t    }\n\t    MockStateService.prototype.getCurrentPage = function () { return page1; };\n\t    ;\n\t    MockStateService.prototype.getCurrentPageName = function () { return page1.name; };\n\t    ;\n\t    MockStateService.prototype.getStartPageName = function () { return page1.name; };\n\t    ;\n\t    MockStateService.prototype.setCurrentPageName = function (name) { page1.name = name; };\n\t    ;\n\t    MockStateService.prototype.getPages = function () { return myMockApp.pages; };\n\t    ;\n\t    MockStateService.prototype.getPage = function (name) { return page1; };\n\t    ;\n\t    return MockStateService;\n\t}());\n\tvar myMockStateService = new MockStateService();\n\tdescribe('Tests for TemplatingService', function () {\n\t    var testTemplatingService = new TemplatingService_1.TemplatingService(myMockStateService);\n\t    describe('createPage() should return a jQuery object', function () {\n\t        it('that for text type contains right ID, p and text elements', function () {\n\t            var aJQObject = testTemplatingService.createPage(page1);\n\t            expect($(\"#testName\", aJQObject)).toExist();\n\t            expect($(\"p\", aJQObject)).toHaveText(testText);\n\t        });\n\t    });\n\t    it('createPagesAndSave() should call createPage the right number of times', function () {\n\t        spyOn(testTemplatingService, 'createPage');\n\t        testTemplatingService.createPagesAndSave();\n\t        expect(testTemplatingService.createPage.calls.count()).toBe(2);\n\t    });\n\t    it('createLayout() should return a jQuery object with a div of class conatiner-fluid', function () {\n\t        var aJQObject = testTemplatingService.createLayout();\n\t        expect($(aJQObject)).toHaveClass(\"container-fluid\");\n\t        expect($(aJQObject)).toEqual(\"div\");\n\t    });\n\t    it('removeElementFromDOM() should remove the specified element from the DOM', function () {\n\t        setFixtures(\"<div class='container-fluid'></div>\");\n\t        expect($(\".container-fluid\")).toExist();\n\t        testTemplatingService.removeElementFromDOM(\".container-fluid\");\n\t        expect($(\".container-fluid\")).not.toExist();\n\t    });\n\t    it('createjQueryItem() should return the correct jQuery object', function () {\n\t        var aJQItem = testTemplatingService.createjQueryItem(\"div\", [{ key: \"id\", value: \"testID\" }], \"testClass\", \"testString\");\n\t        expect($(aJQItem)).toHaveId(\"testID\");\n\t        expect($(aJQItem)).toHaveClass(\"testClass\");\n\t    });\n\t});\n\tvar MockTemplatingService = (function () {\n\t    function MockTemplatingService() {\n\t    }\n\t    MockTemplatingService.prototype.createPage = function (page) { return $(document.createElement(\"div\")); };\n\t    ;\n\t    MockTemplatingService.prototype.createPagesAndSave = function () { };\n\t    ;\n\t    MockTemplatingService.prototype.createLayout = function () { return $(document.createElement(\"div\")); };\n\t    ;\n\t    MockTemplatingService.prototype.removeElementFromDOM = function (className) { };\n\t    ;\n\t    MockTemplatingService.prototype.createjQueryItem = function (type, attrs, styleClasses, text) {\n\t        return $(document.createElement(\"div\"))\n\t            .addClass(\"testingClass\");\n\t    };\n\t    ;\n\t    return MockTemplatingService;\n\t}());\n\tvar myMockTemplatingService = new MockTemplatingService();\n\tdescribe('Tests for SystemService', function () {\n\t    var testSystemService = new SystemService_1.SystemService(myMockTemplatingService, myMockStateService);\n\t    it('removeCurrentPageFromScreen() should remove the current page from the DOM', function () {\n\t        spyOn(myMockTemplatingService, \"removeElementFromDOM\");\n\t        testSystemService.removeCurrentPageFromScreen();\n\t        expect(myMockTemplatingService.removeElementFromDOM)\n\t            .toHaveBeenCalledWith(\".container-fluid\");\n\t    });\n\t    it('goPage() should ...', function () {\n\t    });\n\t    it('renderAllPages() should ...', function () {\n\t    });\n\t    it('goStartPage() should ...', function () {\n\t    });\n\t    it('renewCurrentPage() should ...', function () {\n\t    });\n\t    it('startEmulator() should ...', function (done) {\n\t        spyOn(testSystemService, \"hideSplashScreen\");\n\t        spyOn(testSystemService, \"renderAllPages\");\n\t        spyOn(testSystemService, \"goStartPage\");\n\t        testSystemService.startEmulator();\n\t        var POLL_TIME = 10;\n\t        var endTime = new Date().getTime() + 10000;\n\t        var checkCondition = function () {\n\t            if (new Date().getTime() <= endTime &&\n\t                testSystemService.goStartPage.calls.count() < 1) {\n\t                setTimeout(checkCondition, POLL_TIME);\n\t            }\n\t            else {\n\t                expect(testSystemService.hideSplashScreen).toHaveBeenCalled();\n\t                expect(testSystemService.renderAllPages).toHaveBeenCalled();\n\t                expect(testSystemService.goStartPage).toHaveBeenCalled();\n\t                done();\n\t            }\n\t        };\n\t        checkCondition();\n\t    }, 10000);\n\t    it('hideSplashScreen() should hide the splash screen', function () {\n\t        setFixtures(\"<div class='splashScreen'></div>\");\n\t        expect($(\".splashScreen\")).toBeVisible();\n\t        testSystemService.hideSplashScreen();\n\t        expect($(\".splashScreen\")).not.toBeVisible();\n\t    });\n\t    it('showNotification() should show a notification, and then fade it out', function (done) {\n\t        setFixtures(\"<div class='emulator'></div>\");\n\t        expect($(\".testingClass\")).not.toBeVisible();\n\t        testSystemService.showNotification(\"blah\");\n\t        expect($(\".testingClass\")).toBeVisible();\n\t        var POLL_TIME = 10;\n\t        var endTime = new Date().getTime() + 5000;\n\t        var checkCondition = function () {\n\t            if (new Date().getTime() <= endTime &&\n\t                $(\".testingClass\").is(\":visible\")) {\n\t                setTimeout(checkCondition, POLL_TIME);\n\t            }\n\t            else {\n\t                expect($(\".testingClass\")).not.toBeVisible();\n\t                done();\n\t            }\n\t        };\n\t        checkCondition();\n\t    }, 5000);\n\t});\n\tdescribe('Tests for ActionService', function () {\n\t    it('goPage() should ...', function () {\n\t    });\n\t    it('renderAllPages() should ...', function () {\n\t    });\n\t    it('goStartPage() should ...', function () {\n\t    });\n\t    it('renewCurrentPage() should ...', function () {\n\t    });\n\t    it('startEmulator() should ...', function () {\n\t    });\n\t});\n\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar StateService = (function () {\n\t    function StateService(app) {\n\t        this._app = app;\n\t    }\n\t    StateService.prototype.getStartPageName = function () {\n\t        return this._app.startPageName;\n\t    };\n\t    StateService.prototype.getCurrentPageName = function () {\n\t        return this._app.currentPageName;\n\t    };\n\t    StateService.prototype.setCurrentPageName = function (name) {\n\t        this._app.currentPageName = name;\n\t    };\n\t    StateService.prototype.getCurrentPage = function () {\n\t        var targetName = this._app.currentPageName;\n\t        var returnPage;\n\t        for (var _i = 0, _a = this._app.pages; _i < _a.length; _i++) {\n\t            var page = _a[_i];\n\t            if (page.name === targetName) {\n\t                returnPage = page;\n\t                break;\n\t            }\n\t        }\n\t        return returnPage;\n\t    };\n\t    StateService.prototype.getPage = function (name) {\n\t        var returnPage;\n\t        for (var _i = 0, _a = this._app.pages; _i < _a.length; _i++) {\n\t            var page = _a[_i];\n\t            if (page.name === name) {\n\t                returnPage = page;\n\t                break;\n\t            }\n\t        }\n\t        return returnPage;\n\t    };\n\t    StateService.prototype.getPages = function () {\n\t        return this._app.pages;\n\t    };\n\t    StateService.prototype.emulatorCentralCallBack = function (element, targetElementInfo) {\n\t        var currentPageName = this.getStartPageName();\n\t        if (targetElementInfo) {\n\t            this._app.CentralCallbackFunc(currentPageName, element.name, targetElementInfo);\n\t        }\n\t        else {\n\t            this._app.CentralCallbackFunc(currentPageName, element.name);\n\t        }\n\t    };\n\t    StateService.prototype.getAppCallBack = function () {\n\t        return this._app.CentralCallbackFunc;\n\t    };\n\t    return StateService;\n\t}());\n\texports.StateService = StateService;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar TemplatingService = (function () {\n\t    function TemplatingService(stateService) {\n\t        this._stateService = stateService;\n\t    }\n\t    TemplatingService.prototype.createPage = function (page) {\n\t        var _this = this;\n\t        var outDiv = this.createLayout();\n\t        var _loop_1 = function(element1) {\n\t            var row = this_1.createjQueryItem(\"div\", undefined, \"row\", undefined);\n\t            var element = element1;\n\t            switch (element.type) {\n\t                case \"button\":\n\t                    var temp = this_1.createjQueryItem(\"button\", [{ key: \"id\", value: element.name }], \"btn btn-primary btn-lg btn-block\", element.define);\n\t                    if (element.targetElementID) {\n\t                        $(\".emulator\").on('click', \"#\" + element.name, function () {\n\t                            var targetText = $(\"#\" + element.targetElementID).val();\n\t                            _this._stateService.emulatorCentralCallBack(element, targetText);\n\t                        });\n\t                    }\n\t                    else {\n\t                        $(\".emulator\").on('click', \"#\" + element.name, function () {\n\t                            _this._stateService.emulatorCentralCallBack(element);\n\t                        });\n\t                    }\n\t                    row.append(temp);\n\t                    break;\n\t                case \"text\":\n\t                    var temp1 = this_1.createjQueryItem(\"p\", [{ key: \"id\", value: element.name }], undefined, element.define);\n\t                    row.append(temp1);\n\t                    break;\n\t                case \"image\":\n\t                    var temp2 = this_1.createjQueryItem(\"img\", [{ key: \"id\", value: element.name }, { key: \"src\", value: element.define }], \"img-fluid\");\n\t                    row.append(temp2);\n\t                    break;\n\t                case \"input\":\n\t                    var temp3 = this_1.createjQueryItem(\"div\", undefined, \"form-group\");\n\t                    var label = this_1.createjQueryItem(\"label\", [{ key: \"for\", value: element.name }], \"sr-only\", element.define);\n\t                    temp3.append(label);\n\t                    var input = this_1.createjQueryItem(\"input\", [{ key: \"type\", value: \"text\" }, { key: \"id\", value: element.name }, { key: \"for\", value: element.name }, { key: \"placeholder\", value: element.define }], \"form-control\", element.define);\n\t                    temp3.append(input);\n\t                    row.append(temp3);\n\t                    break;\n\t                case \"list\":\n\t                    var listGroup = this_1.createjQueryItem(\"div\", undefined, \"list-group\");\n\t                    var listItemsData = (element.define);\n\t                    var _loop_2 = function(item) {\n\t                        var a = this_1.createjQueryItem(\"a\", undefined, \"list-group-item list-group-item-action\");\n\t                        $(\".emulator\").on('click', \"#\" + element.name, function () {\n\t                            _this._stateService.emulatorCentralCallBack(element, item.url);\n\t                        });\n\t                        var h5 = this_1.createjQueryItem(\"h5\", undefined, \"list-group-item-heading\", item.title);\n\t                        var p = this_1.createjQueryItem(\"p\", undefined, \"list-group-item-text\", item.description);\n\t                        a.append(h5);\n\t                        a.append(p);\n\t                        listGroup.append(a);\n\t                    };\n\t                    for (var _i = 0, listItemsData_1 = listItemsData; _i < listItemsData_1.length; _i++) {\n\t                        var item = listItemsData_1[_i];\n\t                        _loop_2(item);\n\t                    }\n\t                    break;\n\t            }\n\t            outDiv.append(row);\n\t        };\n\t        var this_1 = this;\n\t        for (var _a = 0, _b = page.rawLayout; _a < _b.length; _a++) {\n\t            var element1 = _b[_a];\n\t            _loop_1(element1);\n\t        }\n\t        return outDiv;\n\t    };\n\t    TemplatingService.prototype.createPagesAndSave = function () {\n\t        for (var _i = 0, _a = this._stateService.getPages(); _i < _a.length; _i++) {\n\t            var page = _a[_i];\n\t            page.afterRenderLayout = this.createPage(page);\n\t        }\n\t    };\n\t    TemplatingService.prototype.createLayout = function () {\n\t        return this.createjQueryItem('div', undefined, \"container-fluid\");\n\t    };\n\t    TemplatingService.prototype.removeElementFromDOM = function (className) {\n\t        $(className).remove();\n\t    };\n\t    TemplatingService.prototype.createjQueryItem = function (type, attrs, styleClasses, text) {\n\t        var domElement = $(document.createElement(type));\n\t        if (styleClasses) {\n\t            domElement.addClass(styleClasses);\n\t        }\n\t        if (attrs) {\n\t            for (var _i = 0, attrs_1 = attrs; _i < attrs_1.length; _i++) {\n\t                var item = attrs_1[_i];\n\t                domElement.attr(item.key, item.value);\n\t            }\n\t        }\n\t        if (text) {\n\t            domElement.html(text);\n\t        }\n\t        return domElement;\n\t    };\n\t    return TemplatingService;\n\t}());\n\texports.TemplatingService = TemplatingService;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar SystemService = (function () {\n\t    function SystemService(templatingService, stateService) {\n\t        this._templatingService = templatingService;\n\t        this._stateService = stateService;\n\t    }\n\t    SystemService.prototype.removeCurrentPageFromScreen = function () {\n\t        this._templatingService.removeElementFromDOM(\".container-fluid\");\n\t    };\n\t    SystemService.prototype.goPage = function (name) {\n\t        this.removeCurrentPageFromScreen();\n\t        for (var _i = 0, _a = this._stateService.getPages(); _i < _a.length; _i++) {\n\t            var page = _a[_i];\n\t            if (page.name === name) {\n\t                $(\".emulator\").prepend(page.afterRenderLayout);\n\t                this.renewCurrentPage(page.name);\n\t            }\n\t        }\n\t    };\n\t    SystemService.prototype.renderAllPages = function (page) {\n\t        if (page) {\n\t            var page1 = this._templatingService.createPage(page);\n\t            this._stateService.getPage(page.name).afterRenderLayout = page1;\n\t        }\n\t        else {\n\t            this._templatingService.createPagesAndSave();\n\t        }\n\t    };\n\t    SystemService.prototype.goStartPage = function () {\n\t        this.goPage(this._stateService.getStartPageName());\n\t    };\n\t    SystemService.prototype.renewCurrentPage = function (name) {\n\t        this._stateService.setCurrentPageName(name);\n\t    };\n\t    SystemService.prototype.startEmulator = function () {\n\t        var _this = this;\n\t        var backgroundDIV = this._templatingService.createjQueryItem(\"div\", undefined, \"splashScreen\");\n\t        var brand = this._templatingService.createjQueryItem(\"p\", undefined, \"brand\", \"Loading\");\n\t        $(\".emulator\").append(backgroundDIV);\n\t        backgroundDIV.append(brand);\n\t        backgroundDIV.fadeIn('slow', function () {\n\t            brand.fadeIn('slow')\n\t                .fadeOut('slow')\n\t                .fadeIn('slow', function () {\n\t                _this.hideSplashScreen();\n\t                _this.renderAllPages();\n\t                _this.goStartPage();\n\t            });\n\t        });\n\t    };\n\t    SystemService.prototype.hideSplashScreen = function () {\n\t        $(\".splashScreen\").fadeOut('slow').remove();\n\t    };\n\t    SystemService.prototype.showNotification = function (text) {\n\t        var noticeDIV = this._templatingService.createjQueryItem(\"div\", undefined, \"bg-danger\", text);\n\t        $(\".emulator\").prepend(noticeDIV);\n\t        setTimeout(function () {\n\t            noticeDIV.fadeOut('slow').remove();\n\t        }, 2000);\n\t    };\n\t    return SystemService;\n\t}());\n\texports.SystemService = SystemService;\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** spec/test.spec.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap bbadabce291b18eb2993\n **/","///<reference path=\"../src/emulator/ui/types/jquery.d.ts\" />\n///<reference path=\"typings/jasmine-jquery.d.ts\" />\n\nimport {IStateService} from \"../src/emulator/models/serviceModels/IStateService\";\nimport {ITemplatingService} from \"../src/emulator/models/serviceModels/ITemplatingService\";\nimport {IPage} from \"../src/emulator/models/dataModels/IPage\";\nimport {IApp} from \"../src/emulator/models/dataModels/IApp\";\nimport {IElement} from \"../src/emulator/models/dataModels/IElement\";\nimport {IListItem} from \"../src/emulator/models/dataModels/IListItem\";\nimport {IFunc} from \"../src/emulator/models/dataModels/IFunction\";\nimport {StateService} from \"../src/emulator/services/StateService\";\nimport {TemplatingService} from \"../src/emulator/services/TemplatingService\";\nimport {SystemService} from \"../src/emulator/services/SystemService\";\nimport {IActionService} from \"../src/emulator/models/serviceModels/IActionService\";\n\njasmine.getFixtures().fixturesPath = \"../spec/\";\n//need to launch Chrome/Chromium with --allow-file-access-from-files option\n//for fixtures to work. Works in standard FireFox.\n//see https://github.com/velesin/jasmine-jquery#cross-domain-policy-problems-under-chrome\n//can load a fixture with loadFixtures('myFixture.html');\n\nclass MockElement implements IElement {\n\ttype;\n    name:string;\n    //targetElementID?:string;\n    define:string|Array<IListItem>;\n}\nlet aMockElement = new MockElement();\naMockElement.type = \"text\";\naMockElement.name = \"testName\";\nlet testText: string = \"Some text to test with\";\naMockElement.define = testText;\n\nclass MockPage implements IPage {\n\tname: string; \n\trawLayout:Array<IElement>;\n\tafterRenderLayout: JQuery;\n\tcallback:Array<IFunc>;\n}\nlet page1 = new MockPage();\npage1.name = \"page1\";\npage1.rawLayout = [aMockElement];\nlet page2 = new MockPage();\npage2.name = \"page2\";\n\nlet pageName: string = \"page1\";\nlet appTitle: string = \"Title\";\nclass MockApp implements IApp {\n    title:string = appTitle;\n    currentPageName:string = pageName;\n    startPageName:string = pageName;\n    pages:Array<IPage> = [page1, page2];\n    injectActionService(as:IActionService) {};\n    startAddingPages() {};\n    CentralCallbackFunc(pageName:string, elementID?:string) {};\n}\nlet myMockApp = new MockApp();\n\ndescribe('Tests for StateService', () => {\n    let testStateService: StateService = new StateService(myMockApp);  \n    it('getStartPageName() should return the specified string', () => {\n        let startPageName: string  = testStateService.getStartPageName();\n        expect(startPageName).toEqual(pageName);\n    });\n    it('getStartPageName() should return a string', () => {\n        let currentPageName: string = testStateService.getCurrentPageName();\n        expect(currentPageName).toEqual(pageName);\n    });\n    it('setCurrentPageName() should set the name of the current page', () => {\n    \tlet newName :string = \"New Name\";\n    \ttestStateService.setCurrentPageName(newName);\n        let currentPageName: string = testStateService.getCurrentPageName();\n        expect(currentPageName).toEqual(newName);\n        testStateService.setCurrentPageName(pageName); \n        //as \"new name\" is not actually a page\n    });\n    it(\"getCurrentPage() should return an IPage object of the current page\", () => {\n    \tlet currentPage: IPage = testStateService.getCurrentPage();\n    \texpect(currentPage.name).toEqual(\"page1\");\n    });\n    it(\"getPage() should return an IPage object with the specified name\", () => {\n    \tlet page: IPage = testStateService.getPage(\"page2\");\n    \texpect(page.name).toEqual(\"page2\");\n    });\n    it(\"getPage() should return undefined if a string that does not match\" +\n    \t\" an existing page name is passed to it\", () => {\n    \tlet page: IPage = testStateService.getPage(\"page3\");\n    \texpect(page).toEqual(undefined);\n    });\n    it(\"getPages() should return an array of all the pages the app contains\", () => {\n    \tlet pages: Array<IPage> = testStateService.getPages();\n    \texpect(pages).toEqual([page1, page2]);\n    });\n    it(\"emulatorCentralCallBack() to call CentralCallbackFunc()\", () => {\n    \tspyOn(myMockApp, 'CentralCallbackFunc');\n    \ttestStateService.emulatorCentralCallBack(aMockElement);\n    \texpect(myMockApp.CentralCallbackFunc).toHaveBeenCalledWith(page1.name, \"testName\");\n    \ttestStateService.emulatorCentralCallBack(aMockElement, \"test\");\n    \texpect(myMockApp.CentralCallbackFunc).toHaveBeenCalledWith(page1.name, \"testName\", \"test\");\n    });\n    it(\"getAppCallBack() should return the correct function\", () => {\n    \tlet fn = testStateService.getAppCallBack();\n    \texpect(fn(\"test\", \"test\")).toEqual(myMockApp.CentralCallbackFunc(\"test\", \"test\"));\n    })\n});\n\nclass MockStateService implements IStateService{\n    _app:IApp = myMockApp;\n    getCurrentPage():IPage {return page1};\n    getCurrentPageName():string {return page1.name};\n    getStartPageName():string {return page1.name};\n    setCurrentPageName(name:string) {page1.name = name};\n    getPages():Array<IPage> {return myMockApp.pages};\n    getPage(name:string ):IPage {return page1};\n    getAppCallBack:(element:IElement,targetElementInfo?:string)=>void;\n    emulatorCentralCallBack:(element:IElement,targetElementInfo?:string)=>void;\n}\nlet myMockStateService = new MockStateService();\n\ndescribe('Tests for TemplatingService', () => {\n\tlet testTemplatingService: TemplatingService = new TemplatingService(myMockStateService);\n\tdescribe('createPage() should return a jQuery object', () => {\n\t    it('that for text type contains right ID, p and text elements', () => {\n\t        let aJQObject: JQuery  = testTemplatingService.createPage(page1);\n\t        expect($(\"#testName\", aJQObject)).toExist();\n\t        expect($(\"p\", aJQObject)).toHaveText(testText);\n\t        //console.log($(\"#testName\", aJQObject)[0].outerHTML)\n\t    });\n\t});\n    it('createPagesAndSave() should call createPage the right number of times', () => {\n    \tspyOn(testTemplatingService, 'createPage');\n    \ttestTemplatingService.createPagesAndSave();\n        expect(testTemplatingService.createPage.calls.count()).toBe(2);\n    });\n    it('createLayout() should return a jQuery object with a div of class conatiner-fluid', () => {\n    \tlet aJQObject: JQuery  = testTemplatingService.createLayout();\n        expect($(aJQObject)).toHaveClass(\"container-fluid\");\n    \texpect($(aJQObject)).toEqual(\"div\");\n    });\n    it('removeElementFromDOM() should remove the specified element from the DOM', () => {\n    \tsetFixtures(\"<div class='container-fluid'></div>\");\n    \texpect($(\".container-fluid\")).toExist();\n        testTemplatingService.removeElementFromDOM(\".container-fluid\");\n        expect($(\".container-fluid\")).not.toExist();\n    });\n    it('createjQueryItem() should return the correct jQuery object', () => {\n    \tlet aJQItem: JQuery = testTemplatingService.createjQueryItem(\"div\",\n    \t\t [{key:\"id\", value:\"testID\"}], \"testClass\", \"testString\");\n        //Note that for below, don't need a selector, as the object is just one element.\n        //When passing a selector and context, only searches within that context, not including\n        //the parent, so $(#testID, aJQItem) will return an empty jQuery object\n        expect($(aJQItem)).toHaveId(\"testID\");\n        expect($(aJQItem)).toHaveClass(\"testClass\");\n        //below is just a reminder on how to see the actual html for debugging as needed\n        //expect(aJQItem[0].outerHTML).toHaveId(\"testID\");\n    });\n});\n\nclass MockTemplatingService implements ITemplatingService{\n\t_stateService:IStateService;\n    createPage(page:IPage):JQuery {return $(document.createElement(\"div\"))};\n    createPagesAndSave() {};\n    createLayout():JQuery {return $(document.createElement(\"div\"))};\n    removeElementFromDOM(className:string) {};\n    createjQueryItem(type:string,\n                     attrs?:Array<{key:string,value:string}>,\n                     styleClasses?:string,\n                     text?:string): JQuery {return $(document.createElement(\"div\"))\n    \t\t\t\t\t\t\t\t\t\t\t\t.addClass(\"testingClass\")};\n}\n\nlet myMockTemplatingService = new MockTemplatingService();\n\ndescribe('Tests for SystemService', () => {\n\tlet testSystemService: SystemService = new SystemService(myMockTemplatingService, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t myMockStateService); \n\tit('removeCurrentPageFromScreen() should remove the current page from the DOM', () => {\n    \tspyOn(myMockTemplatingService, \"removeElementFromDOM\");\n    \ttestSystemService.removeCurrentPageFromScreen();\n    \texpect(myMockTemplatingService.removeElementFromDOM)\n    \t\t\t\t\t.toHaveBeenCalledWith(\".container-fluid\");\n    });\n\tit('goPage() should ...', () => {\n\n    });\n    it('renderAllPages() should ...', () => {\n\n    });\n    it('goStartPage() should ...', () => {\n\n    });\n    it('renewCurrentPage() should ...', () => {\n\n    });\n    it('startEmulator() should ...', (done) => {\n    \tspyOn(testSystemService, \"hideSplashScreen\");\n    \tspyOn(testSystemService, \"renderAllPages\");\n    \tspyOn(testSystemService, \"goStartPage\");\n    \ttestSystemService.startEmulator();\n\n    \tlet POLL_TIME = 10;\n    \tlet endTime = new Date().getTime() + 10000;\n\n    \tlet checkCondition = function() {\n        \tif (new Date().getTime() <= endTime && \n        \t\ttestSystemService.goStartPage.calls.count() < 1) {\n            \tsetTimeout(checkCondition, POLL_TIME);\n            } else {   \n\t\t    \texpect(testSystemService.hideSplashScreen).toHaveBeenCalled();\n\t\t    \texpect(testSystemService.renderAllPages).toHaveBeenCalled();\n\t\t    \texpect(testSystemService.goStartPage).toHaveBeenCalled();\n                done();\n            }\n        };\n        checkCondition();\n    }, 10000);\n    it('hideSplashScreen() should hide the splash screen', () => {\n    \tsetFixtures(\"<div class='splashScreen'></div>\");\n    \texpect($(\".splashScreen\")).toBeVisible();\n        testSystemService.hideSplashScreen();\n        expect($(\".splashScreen\")).not.toBeVisible();\n    });\n    it('showNotification() should show a notification, and then fade it out', (done) => {\n    \tsetFixtures(\"<div class='emulator'></div>\");\n    \texpect($(\".testingClass\")).not.toBeVisible();\n    \ttestSystemService.showNotification(\"blah\");\n    \texpect($(\".testingClass\")).toBeVisible();\n\n    \tlet POLL_TIME = 10;\n    \tlet endTime = new Date().getTime() + 5000;\n\n    \tlet checkCondition = function() {\n        \tif (new Date().getTime() <= endTime && \n        \t\t$(\".testingClass\").is(\":visible\")) {\n            \tsetTimeout(checkCondition, POLL_TIME);\n            } else {\n\t\t\t\texpect($(\".testingClass\")).not.toBeVisible();\n                done();\n            }\n        };\n        checkCondition();\n    }, 5000);\n});\n\ndescribe('Tests for ActionService', () => {\n\tit('goPage() should ...', () => {\n\n    });\n    it('renderAllPages() should ...', () => {\n\n    });\n    it('goStartPage() should ...', () => {\n\n    });\n    it('renewCurrentPage() should ...', () => {\n\n    });\n    it('startEmulator() should ...', () => {\n\n    });\n});\n/*Previous tests for reference\n/// <reference path=\"../typings/jasmine/jasmine.d.ts\" />\n\ndescribe('Tests for the FindViewModel', () => {\n    it('getKeyword() should return a string', () => {\n        let returnValue: string = (new FindViewModel()).getKeyword();\n        expect(returnValue).toEqual(jasmine.any(String));\n    });\n\n    it('getKeywordByVoice() should return a string', () => {\n        let checkThisValue: string;\n        class mockSpeech implements ISpeechService {\n            recognize(): string {\n                return checkThisValue;\n            }\n        }\n\n        let testFindViewModel = new FindViewModel();\n        let findKeywordByVoice = testFindViewModel.getKeywordByVoice(new mockSpeech());\n        expect(findKeywordByVoice).toEqual(checkThisValue);\n    });\n});\n\ndescribe('Test for the HistoryViewModel', () => {\n    it('getHistoryList() should return something', () => {\n        let vm = new HistoryViewModel(new StorageService());\n        let returnValue: IListItem[] = vm.getHistoryList();\n        expect(returnValue).not.toBeNull();\n    });\n});\n\ndescribe('Test for the RecommendViewModel', () => {\n    it('getHistoryList() should return something', () => {\n        let vm = new RecommendViewModel(new StorageService());\n        let returnValue: IListItem[] = vm.getHistoryList();\n        expect(returnValue).not.toBeNull();\n    });\n});\n*/\n\n\n/** WEBPACK FOOTER **\n ** ../spec/test.spec.ts\n **/","import {IStateService} from \"../models/serviceModels/IStateService\";\nimport {IPage} from \"../models/dataModels/IPage\";\nimport {IApp} from \"../models/dataModels/IApp\";\nimport {IElement} from \"../models/dataModels/IElement\";\n\n\nexport class StateService implements IStateService {\n    _app: IApp;\n\n    /**\n     * [constructor description]\n     * @method constructor\n     * @param  {IApp}      app [description]\n     * @return {[type]}        [description]\n     */\n    constructor(app: IApp) {\n        this._app = app;\n    }\n\n    getStartPageName(): string {\n        return this._app.startPageName;\n    }\n\n    getCurrentPageName(): string {\n        return this._app.currentPageName;\n    }\n\n    setCurrentPageName(name: string) {\n        this._app.currentPageName = name;\n    }\n\n    getCurrentPage(): IPage {\n        let targetName: string = this._app.currentPageName;\n        let returnPage: IPage;\n        for (let page of this._app.pages) {\n            if (page.name === targetName) {\n                returnPage = page;\n                break;\n            }\n        }\n        return returnPage;\n    }\n\n    getPage(name: string): IPage {\n        let returnPage: IPage;\n        for (let page of this._app.pages) {\n            if (page.name === name) {\n                returnPage = page;\n                break;\n            }\n        }\n        return returnPage;\n    }\n\n    getPages(): Array<IPage> {\n        return this._app.pages;\n    }\n\n    emulatorCentralCallBack(element: IElement, targetElementInfo?: string) {\n        let currentPageName:string = this.getStartPageName();\n        if (targetElementInfo) {\n            this._app.CentralCallbackFunc(currentPageName, element.name, targetElementInfo);\n        } else {\n            this._app.CentralCallbackFunc(currentPageName, element.name);\n        }\n    }\n\n    getAppCallBack(): (pageName: string, elementID?: string) => void {\n        return this._app.CentralCallbackFunc;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./emulator/services/StateService.ts\n **/","///<reference path=\"../ui/types/jquery.d.ts\" />\n\nimport {IPage} from '../models/dataModels/IPage'\nimport {ITemplatingService} from \"../models/serviceModels/ITemplatingService\";\nimport {IElement} from \"../models/dataModels/IElement\";\nimport {IStateService} from \"../models/serviceModels/IStateService\";\nimport {IListItem} from \"../models/dataModels/IListItem\";\n\nexport class TemplatingService implements ITemplatingService {\n    _stateService: IStateService;\n\n    /**\n     * [constructor description]\n     * @method constructor\n     * @param  {IStateService} stateService [description]\n     * @return {[type]}                     [description]\n     */\n    constructor(stateService: IStateService) {\n        this._stateService = stateService;\n    }\n\n    createPage(page: IPage): JQuery {\n        let outDiv: JQuery = this.createLayout();\n\n        for (let element1 of page.rawLayout){\n            let row = this.createjQueryItem(\"div\",\n                undefined,\n                \"row\",\n                undefined);\n            let element:IElement = element1;\n            switch (element.type) {\n                case \"button\":\n                    let temp = this.createjQueryItem(\"button\",\n                        [{key:\"id\", value:element.name}],\n                        \"btn btn-primary btn-lg btn-block\",\n                        <string>element.define);\n                    if (element.targetElementID) {\n                        $(\".emulator\").on(\n                            'click',\n                            \"#\"+element.name,\n                            ()=>{\n                                let targetText = $(\"#\"+element.targetElementID).val();\n                                this._stateService.emulatorCentralCallBack(element,targetText);\n                            });\n                    } else {\n                        $(\".emulator\").on(\n                            'click',\n                            \"#\"+element.name,\n                            ()=>{\n                                this._stateService.emulatorCentralCallBack(element);\n                            });\n                    }\n                    row.append(temp);\n                    break;\n                case \"text\":\n                    let temp1 = this.createjQueryItem(\"p\",\n                        [{key:\"id\", value:element.name}],\n                        undefined,\n                        <string>element.define);\n                    row.append(temp1);\n                    break;\n                case \"image\":\n                    let temp2 = this.createjQueryItem(\"img\",\n                        [{key:\"id\", value:element.name}, {key:\"src\", value:<string>element.define}],\n                        \"img-fluid\");\n                    row.append(temp2);\n                    break;\n                case \"input\":\n                    let temp3 = this.createjQueryItem(\"div\", undefined, \"form-group\");\n\n                    let label = this.createjQueryItem(\"label\",\n                        [{key:\"for\", value:element.name}],\n                        \"sr-only\",\n                        <string>element.define);\n                    temp3.append(label);\n\n                    let input = this.createjQueryItem(\"input\",\n                        [{key:\"type\", value:\"text\"}, {key:\"id\", value:element.name}, {key:\"for\", value:element.name}, {key:\"placeholder\", value:<string>element.define}],\n                        \"form-control\",\n                        <string>element.define);\n                    temp3.append(input);\n                    row.append(temp3);\n                    break;\n                case \"list\":\n                    let listGroup = this.createjQueryItem(\"div\", undefined, \"list-group\");\n                    let listItemsData = <Array<IListItem>>(element.define);\n                    for (let item of listItemsData){\n                        let a = this.createjQueryItem(\"a\",\n                            undefined,\n                            \"list-group-item list-group-item-action\");\n                        $(\".emulator\").on(\n                            'click',\n                            \"#\"+element.name,\n                            ()=>{\n                                this._stateService.emulatorCentralCallBack(element,item.url);\n                            });\n                        let h5 = this.createjQueryItem(\"h5\",\n                            undefined,\n                            \"list-group-item-heading\",\n                            item.title);\n                        let p = this.createjQueryItem(\"p\",\n                            undefined,\n                            \"list-group-item-text\",\n                            item.description);\n                        a.append(h5);\n                        a.append(p);\n                        listGroup.append(a);\n                    }\n                    break;\n            }\n            outDiv.append(row);\n        }\n\n        return outDiv;\n    }\n\n    createPagesAndSave() {\n        for (let page of this._stateService.getPages()){\n            page.afterRenderLayout = this.createPage(page);\n        }\n    }\n\n    createLayout(): JQuery {\n        return this.createjQueryItem('div', undefined, \"container-fluid\");\n    }\n\n    removeElementFromDOM(className: string) {\n        $(className).remove();\n    }\n\n    createjQueryItem(type: string,\n                     attrs?: Array<{key: string,value: string}>,\n                     styleClasses?: string,\n                     text?: string): JQuery {\n        let domElement = $(document.createElement(type));\n        if (styleClasses) {\n            domElement.addClass(styleClasses);\n        }\n        if (attrs) {\n            for (let item of attrs){\n                domElement.attr(item.key, item.value);\n            }\n        }\n\n        if (text) {\n            domElement.html(text);\n        }\n        return domElement;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./emulator/services/TemplatingService.ts\n **/","import {ISystemService} from \"../models/serviceModels/ISystemService\";\nimport {IApp} from \"../models/dataModels/IApp\";\nimport {IPage} from \"../models/dataModels/IPage\";\nimport {IStateService} from \"../models/serviceModels/IStateService\";\nimport {ITemplatingService} from \"../models/serviceModels/ITemplatingService\";\n\nexport class SystemService implements ISystemService{\n    _templatingService: ITemplatingService;\n    _stateService: IStateService;\n\n    /**\n     * [constructor description]\n     * @method constructor\n     * @param  {ITemplatingService} templatingService [description]\n     * @param  {IStateService}      stateService      [description]\n     * @return {[type]}                               [description]\n     */\n    constructor(templatingService: ITemplatingService, stateService: IStateService) {\n        this._templatingService = templatingService;\n        this._stateService = stateService;\n    }\n\n    removeCurrentPageFromScreen() {\n        this._templatingService.removeElementFromDOM(\".container-fluid\");\n    }\n\n    goPage(name: string) {\n        this.removeCurrentPageFromScreen();\n        for (let page of this._stateService.getPages()){\n            if (page.name === name){\n                $(\".emulator\").prepend(page.afterRenderLayout);\n                this.renewCurrentPage(page.name);\n            }\n        }\n    }\n\n    renderAllPages(page?:IPage){\n        if (page){\n            let page1:JQuery = this._templatingService.createPage(page);\n            this._stateService.getPage(page.name).afterRenderLayout = page1;\n        } else {\n            this._templatingService.createPagesAndSave();\n        }\n    }\n\n    goStartPage() {\n        this.goPage(this._stateService.getStartPageName());\n    }\n\n    renewCurrentPage(name: string) {\n        this._stateService.setCurrentPageName(name);\n    }\n\n    startEmulator() {\n        let backgroundDIV = this._templatingService.createjQueryItem(\"div\",undefined,\"splashScreen\");\n        let brand = this._templatingService.createjQueryItem(\"p\",undefined,\"brand\",\"Loading\");\n        $(\".emulator\").append(backgroundDIV);\n        backgroundDIV.append(brand);\n        backgroundDIV.fadeIn('slow',()=>{\n            brand.fadeIn('slow')\n                .fadeOut('slow')\n                .fadeIn('slow',()=>{\n                    this.hideSplashScreen();\n                    this.renderAllPages();\n                    this.goStartPage();\n                });\n        });\n    }\n\n    hideSplashScreen(){\n        $(\".splashScreen\").fadeOut('slow').remove();\n    }\n\n    showNotification(text:string) {\n        let noticeDIV = this._templatingService.createjQueryItem(\"div\", undefined, \"bg-danger\", text);\n        $(\".emulator\").prepend(noticeDIV);\n        setTimeout(()=>{\n            noticeDIV.fadeOut('slow').remove();\n        },2000);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./emulator/services/SystemService.ts\n **/"],"sourceRoot":""}