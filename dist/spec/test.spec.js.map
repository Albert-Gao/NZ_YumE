{"version":3,"sources":["webpack:///spec/test.spec.js","webpack:///webpack/bootstrap 536950cfb44d80b9cb4d?6c19","webpack:///../spec/test.spec.ts","webpack:///./emulator/services/StateService.ts?b70c","webpack:///./emulator/services/TemplatingService.ts?e74f","webpack:///./emulator/services/SystemService.ts?39fd","webpack:///./emulator/services/ActionService.ts?0899"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","StateService_1","TemplatingService_1","SystemService_1","ActionService_1","jasmine","getFixtures","fixturesPath","MockElement","aMockElement","type","name","testText","define","MockPage","page1","rawLayout","page2","pageName","appTitle","MockApp","this","title","currentPageName","startPageName","pages","prototype","injectActionService","as","startAddingPages","CentralCallbackFunc","elementID","myMockApp","describe","testStateService","StateService","it","getStartPageName","expect","toEqual","getCurrentPageName","newName","setCurrentPageName","currentPage","getCurrentPage","page","getPage","undefined","getPages","spyOn","emulatorCentralCallBack","toHaveBeenCalledWith","fn","getAppCallBack","MockStateService","_app","element","targetElementInfo","myMockStateService","testTemplatingService","TemplatingService","testPage","buttonElement","aJQObject","createPage","$","attr","toHaveText","textElement","toExist","imageElement","inputElement","listElement","description","url","toHaveHtml","createPagesAndSave","calls","count","toBe","createLayout","toHaveClass","setFixtures","removeElementFromDOM","not","aJQItem","createjQueryItem","key","value","toHaveId","MockTemplatingService","document","createElement","addClass","className","attrs","styleClasses","text","myMockTemplatingService","testSystemService","SystemService","removeCurrentPageFromScreen","afterRenderLayout","goPage","toHaveBeenCalled","renewCurrentPage","and","callThrough","renderAllPages","goStartPage","done","startEmulator","POLL_TIME","endTime","Date","getTime","checkCondition","setTimeout","hideSplashScreen","toBeVisible","showNotification","is","myMockSystemService","testActionService","ActionService","reRenderPage","app","returnPage","targetName","_i","_a","length","stateService","_stateService","_this","outDiv","_loop_1","element1","row","this_1","temp","targetElementID","on","targetText","val","append","temp1","temp2","temp3","label","input","listGroup","listItemsData","_loop_2","item","a","h5","listItemsData_1","_b","remove","domElement","attrs_1","html","templatingService","_templatingService","prepend","backgroundDIV","brand","fadeIn","fadeOut","noticeDIV","systemService","_systemService","words","saveToLocalStorage","localStorage","setItem","getFromLocalStorage","getItem","callYelpSearchAPI","keywords","callback","auth","consumerKey","consumerSecret","accessToken","accessTokenSecret","serviceProvider","signatureMethod","terms","near","accessor","tokenSecret","parameters","push","message","action","method","OAuth","setTimestampAndNonce","SignatureMethod","sign","parameterMap","getParameterMap","ajax","data","dataType","jsonpCallback","cache","textStatus","jqXHR","businesses","fail","errorThrown","console","log","JSON","stringify"],"mappings":"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","file":"./spec/test.spec.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar StateService_1 = __webpack_require__(5);\n\tvar TemplatingService_1 = __webpack_require__(6);\n\tvar SystemService_1 = __webpack_require__(7);\n\tvar ActionService_1 = __webpack_require__(8);\n\tjasmine.getFixtures().fixturesPath = \"../spec/\";\n\tvar MockElement = (function () {\n\t    function MockElement() {\n\t    }\n\t    return MockElement;\n\t}());\n\tvar aMockElement = new MockElement();\n\taMockElement.type = \"text\";\n\taMockElement.name = \"testName\";\n\tvar testText = \"Some text to test with\";\n\taMockElement.define = testText;\n\tvar MockPage = (function () {\n\t    function MockPage() {\n\t    }\n\t    return MockPage;\n\t}());\n\tvar page1 = new MockPage();\n\tpage1.name = \"page1\";\n\tpage1.rawLayout = [aMockElement];\n\tvar page2 = new MockPage();\n\tpage2.name = \"page2\";\n\tvar pageName = \"page1\";\n\tvar appTitle = \"Title\";\n\tvar MockApp = (function () {\n\t    function MockApp() {\n\t        this.title = appTitle;\n\t        this.currentPageName = pageName;\n\t        this.startPageName = pageName;\n\t        this.pages = [page1, page2];\n\t    }\n\t    MockApp.prototype.injectActionService = function (as) { };\n\t    ;\n\t    MockApp.prototype.startAddingPages = function () { };\n\t    ;\n\t    MockApp.prototype.CentralCallbackFunc = function (pageName, elementID) { };\n\t    ;\n\t    return MockApp;\n\t}());\n\tvar myMockApp = new MockApp();\n\tdescribe('Tests for StateService', function () {\n\t    var testStateService = new StateService_1.StateService(myMockApp);\n\t    it('getStartPageName() should return the specified string', function () {\n\t        var startPageName = testStateService.getStartPageName();\n\t        expect(startPageName).toEqual(pageName);\n\t    });\n\t    it('getCurrentPageName() should return the correct string', function () {\n\t        var currentPageName = testStateService.getCurrentPageName();\n\t        expect(currentPageName).toEqual(pageName);\n\t    });\n\t    it('setCurrentPageName() should set the name of the current page', function () {\n\t        var newName = \"New Name\";\n\t        testStateService.setCurrentPageName(newName);\n\t        var currentPageName = testStateService.getCurrentPageName();\n\t        expect(currentPageName).toEqual(newName);\n\t        testStateService.setCurrentPageName(pageName);\n\t    });\n\t    it(\"getCurrentPage() should return an IPage object of the current page\", function () {\n\t        var currentPage = testStateService.getCurrentPage();\n\t        expect(currentPage.name).toEqual(\"page1\");\n\t    });\n\t    it(\"getPage() should return an IPage object with the specified name\", function () {\n\t        var page = testStateService.getPage(\"page2\");\n\t        expect(page.name).toEqual(\"page2\");\n\t    });\n\t    it(\"getPage() should return undefined if a string that does not match\" +\n\t        \" an existing page name is passed to it\", function () {\n\t        var page = testStateService.getPage(\"page3\");\n\t        expect(page).toEqual(undefined);\n\t    });\n\t    it(\"getPages() should return an array of all the pages the app contains\", function () {\n\t        var pages = testStateService.getPages();\n\t        expect(pages).toEqual([page1, page2]);\n\t    });\n\t    it(\"emulatorCentralCallBack() to call CentralCallbackFunc()\", function () {\n\t        spyOn(myMockApp, 'CentralCallbackFunc');\n\t        testStateService.emulatorCentralCallBack(aMockElement);\n\t        expect(myMockApp.CentralCallbackFunc).toHaveBeenCalledWith(page1.name, \"testName\");\n\t        testStateService.emulatorCentralCallBack(aMockElement, \"test\");\n\t        expect(myMockApp.CentralCallbackFunc).toHaveBeenCalledWith(page1.name, \"testName\", \"test\");\n\t    });\n\t    it(\"getAppCallBack() should return the correct function\", function () {\n\t        var fn = testStateService.getAppCallBack();\n\t        expect(fn(\"test\", \"test\")).toEqual(myMockApp.CentralCallbackFunc(\"test\", \"test\"));\n\t    });\n\t});\n\tvar MockStateService = (function () {\n\t    function MockStateService() {\n\t        this._app = myMockApp;\n\t    }\n\t    MockStateService.prototype.getCurrentPage = function () { return page1; };\n\t    ;\n\t    MockStateService.prototype.getCurrentPageName = function () { return page1.name; };\n\t    ;\n\t    MockStateService.prototype.getStartPageName = function () { return page1.name; };\n\t    ;\n\t    MockStateService.prototype.setCurrentPageName = function (name) { page1.name = name; };\n\t    ;\n\t    MockStateService.prototype.getPages = function () { return myMockApp.pages; };\n\t    ;\n\t    MockStateService.prototype.getPage = function (name) { return page1; };\n\t    ;\n\t    MockStateService.prototype.emulatorCentralCallBack = function (element, targetElementInfo) { };\n\t    ;\n\t    return MockStateService;\n\t}());\n\tvar myMockStateService = new MockStateService();\n\tdescribe('Tests for TemplatingService', function () {\n\t    var testTemplatingService = new TemplatingService_1.TemplatingService(myMockStateService);\n\t    describe('createPage() should return a jQuery object', function () {\n\t        var testPage = new MockPage();\n\t        testPage.name = \"testPage\";\n\t        it('that for button type contains right ID, classes, definition', function () {\n\t            var buttonElement = new MockElement();\n\t            buttonElement.type = \"button\";\n\t            buttonElement.name = \"buttonElement\";\n\t            buttonElement.define = \"buttonElementDefinition\";\n\t            testPage.rawLayout = [buttonElement];\n\t            var aJQObject = testTemplatingService.createPage(testPage);\n\t            expect($(\"button\", aJQObject).attr(\"id\")).toEqual(buttonElement.name);\n\t            expect($(\".btn\", aJQObject)).toHaveText(buttonElement.define);\n\t        });\n\t        it('that for text type contains right ID, p and text elements', function () {\n\t            var textElement = new MockElement();\n\t            textElement.type = \"text\";\n\t            textElement.name = \"textElement\";\n\t            textElement.define = \"textElementDefinition\";\n\t            testPage.rawLayout = [textElement];\n\t            var aJQObject = testTemplatingService.createPage(testPage);\n\t            expect($(\"#textElement\", aJQObject)).toExist();\n\t            expect($(\"p\", aJQObject)).toHaveText(textElement.define);\n\t        });\n\t        it('that for image type contains right ID, class, img attr and img source', function () {\n\t            var imageElement = new MockElement();\n\t            imageElement.type = \"image\";\n\t            imageElement.name = \"imageElement\";\n\t            imageElement.define = \"imageElementDefinition\";\n\t            testPage.rawLayout = [imageElement];\n\t            var aJQObject = testTemplatingService.createPage(testPage);\n\t            expect($(\"#imageElement\", aJQObject)).toExist();\n\t            expect($(\".img-fluid\", aJQObject)).toExist();\n\t            expect($(\"img\", aJQObject).attr(\"src\")).toEqual(imageElement.define);\n\t        });\n\t        it('that for input type contains the right classes, attributes and text', function () {\n\t            var inputElement = new MockElement();\n\t            inputElement.type = \"input\";\n\t            inputElement.name = \"inputElement\";\n\t            inputElement.define = \"inputElementDefinition\";\n\t            testPage.rawLayout = [inputElement];\n\t            var aJQObject = testTemplatingService.createPage(testPage);\n\t            expect($(\".form-group\", aJQObject)).toExist();\n\t            expect($(\".sr-only\", aJQObject)).toExist();\n\t            expect($(\".form-control\", aJQObject)).toExist();\n\t            expect($(\"label\", aJQObject).attr(\"for\")).toEqual(inputElement.name);\n\t            expect($(\"input\", aJQObject).attr(\"type\")).toEqual(\"text\");\n\t            expect($(\"input\", aJQObject).attr(\"id\")).toEqual(inputElement.name);\n\t            expect($(\"input\", aJQObject).attr(\"for\")).toEqual(inputElement.name);\n\t            expect($(\"input\", aJQObject).attr(\"placeholder\")).toEqual(inputElement.define);\n\t            expect($(\"input\", aJQObject)).toHaveText(inputElement.define);\n\t        });\n\t        it('that for list type contains the right classes and descriptions', function () {\n\t            var listElement = new MockElement();\n\t            listElement.type = \"list\";\n\t            listElement.name = \"listElement\";\n\t            listElement.define =\n\t                [{ title: \"item1\", description: \"item1Desc\", url: \"item1url\" },\n\t                    { title: \"item2\", description: \"item2Desc\", url: \"item2url\" }];\n\t            testPage.rawLayout = [listElement];\n\t            var aJQObject = testTemplatingService.createPage(testPage);\n\t            expect($(\".list-group\", aJQObject)).toExist();\n\t            expect($(\"h5\", aJQObject)).toHaveHtml(\"item1\");\n\t            expect($(\"h5:nth(1)\", aJQObject)).toHaveHtml(\"item2\");\n\t            expect($(\"p\", aJQObject)).toHaveHtml(\"item1Desc\");\n\t            expect($(\"p:nth(1)\", aJQObject)).toHaveHtml(\"item2Desc\");\n\t        });\n\t    });\n\t    it('createPagesAndSave() should call createPage the right number of times', function () {\n\t        spyOn(testTemplatingService, 'createPage');\n\t        testTemplatingService.createPagesAndSave();\n\t        expect(testTemplatingService.createPage.calls.count()).toBe(2);\n\t    });\n\t    it('createLayout() should return a jQuery object with a div of class conatiner-fluid', function () {\n\t        var aJQObject = testTemplatingService.createLayout();\n\t        expect($(aJQObject)).toHaveClass(\"container-fluid\");\n\t        expect($(aJQObject)).toEqual(\"div\");\n\t    });\n\t    it('removeElementFromDOM() should remove the specified element from the DOM', function () {\n\t        setFixtures(\"<div class='container-fluid'></div>\");\n\t        expect($(\".container-fluid\")).toExist();\n\t        testTemplatingService.removeElementFromDOM(\".container-fluid\");\n\t        expect($(\".container-fluid\")).not.toExist();\n\t    });\n\t    it('createjQueryItem() should return the correct jQuery object', function () {\n\t        var aJQItem = testTemplatingService.createjQueryItem(\"div\", [{ key: \"id\", value: \"testID\" }], \"testClass\", \"testString\");\n\t        expect($(aJQItem)).toHaveId(\"testID\");\n\t        expect($(aJQItem)).toHaveClass(\"testClass\");\n\t    });\n\t});\n\tvar MockTemplatingService = (function () {\n\t    function MockTemplatingService() {\n\t    }\n\t    MockTemplatingService.prototype.createPage = function (page) {\n\t        return $(document.createElement(\"div\"))\n\t            .addClass(\"testingClass\");\n\t    };\n\t    ;\n\t    MockTemplatingService.prototype.createPagesAndSave = function () { };\n\t    ;\n\t    MockTemplatingService.prototype.createLayout = function () { return $(document.createElement(\"div\")); };\n\t    ;\n\t    MockTemplatingService.prototype.removeElementFromDOM = function (className) { };\n\t    ;\n\t    MockTemplatingService.prototype.createjQueryItem = function (type, attrs, styleClasses, text) {\n\t        return $(document.createElement(\"div\"))\n\t            .addClass(\"testingClass\");\n\t    };\n\t    ;\n\t    return MockTemplatingService;\n\t}());\n\tvar myMockTemplatingService = new MockTemplatingService();\n\tdescribe('Tests for SystemService method', function () {\n\t    var testSystemService = new SystemService_1.SystemService(myMockTemplatingService, myMockStateService);\n\t    it('removeCurrentPageFromScreen() should remove the current page from the DOM', function () {\n\t        spyOn(myMockTemplatingService, \"removeElementFromDOM\");\n\t        testSystemService.removeCurrentPageFromScreen();\n\t        expect(myMockTemplatingService.removeElementFromDOM)\n\t            .toHaveBeenCalledWith(\".container-fluid\");\n\t    });\n\t    it('goPage() should remove the current page, and show the new one', function () {\n\t        page2.afterRenderLayout = $(document.createElement(\"div\")).addClass(\"second\");\n\t        setFixtures(\"<div class='emulator'></div>\");\n\t        expect($(\".second\")).not.toExist();\n\t        spyOn(testSystemService, \"removeCurrentPageFromScreen\");\n\t        spyOn(testSystemService, \"renewCurrentPage\");\n\t        testSystemService.goPage(\"page2\");\n\t        expect(testSystemService.removeCurrentPageFromScreen).toHaveBeenCalled();\n\t        expect(testSystemService.renewCurrentPage).toHaveBeenCalledWith(\"page2\");\n\t        expect($(\".second\")).toExist();\n\t    });\n\t    describe('renderAllPages() should', function () {\n\t        it('if called with a page, should rerender the page', function () {\n\t            spyOn(myMockTemplatingService, \"createPage\").and.callThrough();\n\t            spyOn(myMockStateService, \"getPage\").and.callThrough();\n\t            expect($(page1.afterRenderLayout)).not.toExist();\n\t            testSystemService.renderAllPages(page1);\n\t            expect(myMockTemplatingService.createPage).toHaveBeenCalledWith(page1);\n\t            expect(myMockStateService.getPage).toHaveBeenCalledWith(page1.name);\n\t            expect($(page1.afterRenderLayout)).toExist();\n\t        });\n\t        it('if called with no arguments, call createPagesAndSave()', function () {\n\t            spyOn(myMockTemplatingService, \"createPagesAndSave\");\n\t            testSystemService.renderAllPages();\n\t            expect(myMockTemplatingService.createPagesAndSave).toHaveBeenCalledWith();\n\t        });\n\t    });\n\t    it('goStartPage() should call getStartPageName and goPage', function () {\n\t        spyOn(myMockStateService, \"getStartPageName\");\n\t        spyOn(testSystemService, \"goPage\");\n\t        testSystemService.goStartPage();\n\t        expect(myMockStateService.getStartPageName).toHaveBeenCalled();\n\t        expect(testSystemService.goPage).toHaveBeenCalled();\n\t    });\n\t    it('renewCurrentPage() should call setCurrentPageName from StateService', function () {\n\t        spyOn(myMockStateService, \"setCurrentPageName\");\n\t        testSystemService.renewCurrentPage(\"testName\");\n\t        expect(myMockStateService.setCurrentPageName)\n\t            .toHaveBeenCalledWith(\"testName\");\n\t    });\n\t    it('startEmulator() should call hideSplashScreen,' +\n\t        'renderAllPages and goStartPage', function (done) {\n\t        spyOn(testSystemService, \"hideSplashScreen\");\n\t        spyOn(testSystemService, \"renderAllPages\");\n\t        spyOn(testSystemService, \"goStartPage\");\n\t        testSystemService.startEmulator();\n\t        var POLL_TIME = 10;\n\t        var endTime = new Date().getTime() + 10000;\n\t        var checkCondition = function () {\n\t            if (new Date().getTime() <= endTime &&\n\t                testSystemService.goStartPage.calls.count() < 1) {\n\t                setTimeout(checkCondition, POLL_TIME);\n\t            }\n\t            else {\n\t                expect(testSystemService.hideSplashScreen).toHaveBeenCalled();\n\t                expect(testSystemService.renderAllPages).toHaveBeenCalled();\n\t                expect(testSystemService.goStartPage).toHaveBeenCalled();\n\t                done();\n\t            }\n\t        };\n\t        checkCondition();\n\t    }, 10000);\n\t    it('hideSplashScreen() should hide the splash screen', function () {\n\t        setFixtures(\"<div class='splashScreen'></div>\");\n\t        expect($(\".splashScreen\")).toBeVisible();\n\t        testSystemService.hideSplashScreen();\n\t        expect($(\".splashScreen\")).not.toBeVisible();\n\t    });\n\t    it('showNotification() should show a notification, and then fade it out', function (done) {\n\t        setFixtures(\"<div class='emulator'></div>\");\n\t        expect($(\".testingClass\")).not.toBeVisible();\n\t        testSystemService.showNotification(\"blah\");\n\t        expect($(\".testingClass\")).toBeVisible();\n\t        var POLL_TIME = 10;\n\t        var endTime = new Date().getTime() + 5000;\n\t        var checkCondition = function () {\n\t            if (new Date().getTime() <= endTime &&\n\t                $(\".testingClass\").is(\":visible\")) {\n\t                setTimeout(checkCondition, POLL_TIME);\n\t            }\n\t            else {\n\t                expect($(\".testingClass\")).not.toBeVisible();\n\t                done();\n\t            }\n\t        };\n\t        checkCondition();\n\t    }, 5000);\n\t});\n\tdescribe('Tests for ActionService', function () {\n\t    var myMockSystemService = new SystemService_1.SystemService(myMockTemplatingService, myMockStateService);\n\t    var testActionService = new ActionService_1.ActionService(myMockSystemService);\n\t    it('goPage() should call goPage from SystemService', function () {\n\t        spyOn(myMockSystemService, \"goPage\");\n\t        testActionService.goPage(\"page1\");\n\t        expect(myMockSystemService.goPage).toHaveBeenCalledWith(\"page1\");\n\t    });\n\t    it('showNotification() should call showNotification from SystemService', function () {\n\t        spyOn(myMockSystemService, \"showNotification\");\n\t        testActionService.showNotification(\"showNotification\");\n\t        expect(myMockSystemService.showNotification).toHaveBeenCalledWith(\"showNotification\");\n\t    });\n\t    it('reRenderPage() should renderAllPages from SystemService', function () {\n\t        spyOn(myMockSystemService, \"renderAllPages\");\n\t        testActionService.reRenderPage(page1);\n\t        expect(myMockSystemService.renderAllPages).toHaveBeenCalledWith(page1);\n\t    });\n\t});\n\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar StateService = (function () {\n\t    function StateService(app) {\n\t        this._app = app;\n\t    }\n\t    StateService.prototype.getStartPageName = function () {\n\t        return this._app.startPageName;\n\t    };\n\t    StateService.prototype.getCurrentPageName = function () {\n\t        return this._app.currentPageName;\n\t    };\n\t    StateService.prototype.setCurrentPageName = function (name) {\n\t        this._app.currentPageName = name;\n\t    };\n\t    StateService.prototype.getCurrentPage = function () {\n\t        var targetName = this._app.currentPageName;\n\t        var returnPage;\n\t        for (var _i = 0, _a = this._app.pages; _i < _a.length; _i++) {\n\t            var page = _a[_i];\n\t            if (page.name === targetName) {\n\t                returnPage = page;\n\t                break;\n\t            }\n\t        }\n\t        return returnPage;\n\t    };\n\t    StateService.prototype.getPage = function (name) {\n\t        var returnPage;\n\t        for (var _i = 0, _a = this._app.pages; _i < _a.length; _i++) {\n\t            var page = _a[_i];\n\t            if (page.name === name) {\n\t                returnPage = page;\n\t                break;\n\t            }\n\t        }\n\t        return returnPage;\n\t    };\n\t    StateService.prototype.getPages = function () {\n\t        return this._app.pages;\n\t    };\n\t    StateService.prototype.emulatorCentralCallBack = function (element, targetElementInfo) {\n\t        var currentPageName = this.getStartPageName();\n\t        if (targetElementInfo) {\n\t            this._app.CentralCallbackFunc(currentPageName, element.name, targetElementInfo);\n\t        }\n\t        else {\n\t            this._app.CentralCallbackFunc(currentPageName, element.name);\n\t        }\n\t    };\n\t    StateService.prototype.getAppCallBack = function () {\n\t        return this._app.CentralCallbackFunc;\n\t    };\n\t    return StateService;\n\t}());\n\texports.StateService = StateService;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar TemplatingService = (function () {\n\t    function TemplatingService(stateService) {\n\t        this._stateService = stateService;\n\t    }\n\t    TemplatingService.prototype.createPage = function (page) {\n\t        var _this = this;\n\t        var outDiv = this.createLayout();\n\t        var _loop_1 = function(element1) {\n\t            var row = this_1.createjQueryItem(\"div\", undefined, \"row\", undefined);\n\t            var element = element1;\n\t            switch (element.type) {\n\t                case \"button\":\n\t                    var temp = this_1.createjQueryItem(\"button\", [{ key: \"id\", value: element.name }], \"btn btn-primary btn-lg btn-block\", element.define);\n\t                    if (element.targetElementID) {\n\t                        $(\".emulator\").on('click', \"#\" + element.name, function () {\n\t                            var targetText = $(\"#\" + element.targetElementID).val();\n\t                            _this._stateService.emulatorCentralCallBack(element, targetText);\n\t                        });\n\t                    }\n\t                    else {\n\t                        $(\".emulator\").on('click', \"#\" + element.name, function () {\n\t                            _this._stateService.emulatorCentralCallBack(element);\n\t                        });\n\t                    }\n\t                    row.append(temp);\n\t                    break;\n\t                case \"text\":\n\t                    var temp1 = this_1.createjQueryItem(\"p\", [{ key: \"id\", value: element.name }], undefined, element.define);\n\t                    row.append(temp1);\n\t                    break;\n\t                case \"image\":\n\t                    var temp2 = this_1.createjQueryItem(\"img\", [{ key: \"id\", value: element.name }, { key: \"src\", value: element.define }], \"img-fluid\");\n\t                    row.append(temp2);\n\t                    break;\n\t                case \"input\":\n\t                    var temp3 = this_1.createjQueryItem(\"div\", undefined, \"form-group\");\n\t                    var label = this_1.createjQueryItem(\"label\", [{ key: \"for\", value: element.name }], \"sr-only\", element.define);\n\t                    temp3.append(label);\n\t                    var input = this_1.createjQueryItem(\"input\", [{ key: \"type\", value: \"text\" }, { key: \"id\", value: element.name }, { key: \"for\", value: element.name }, { key: \"placeholder\", value: element.define }], \"form-control\", element.define);\n\t                    temp3.append(input);\n\t                    row.append(temp3);\n\t                    break;\n\t                case \"list\":\n\t                    var listGroup = this_1.createjQueryItem(\"div\", undefined, \"list-group\");\n\t                    var listItemsData = (element.define);\n\t                    var _loop_2 = function(item) {\n\t                        var a = this_1.createjQueryItem(\"a\", undefined, \"list-group-item list-group-item-action\");\n\t                        $(\".emulator\").on('click', \"#\" + element.name, function () {\n\t                            _this._stateService.emulatorCentralCallBack(element, item.url);\n\t                        });\n\t                        var h5 = this_1.createjQueryItem(\"h5\", undefined, \"list-group-item-heading\", item.title);\n\t                        var p = this_1.createjQueryItem(\"p\", undefined, \"list-group-item-text\", item.description);\n\t                        a.append(h5);\n\t                        a.append(p);\n\t                        listGroup.append(a);\n\t                    };\n\t                    for (var _i = 0, listItemsData_1 = listItemsData; _i < listItemsData_1.length; _i++) {\n\t                        var item = listItemsData_1[_i];\n\t                        _loop_2(item);\n\t                    }\n\t                    row.append(listGroup);\n\t                    break;\n\t            }\n\t            outDiv.append(row);\n\t        };\n\t        var this_1 = this;\n\t        for (var _a = 0, _b = page.rawLayout; _a < _b.length; _a++) {\n\t            var element1 = _b[_a];\n\t            _loop_1(element1);\n\t        }\n\t        return outDiv;\n\t    };\n\t    TemplatingService.prototype.createPagesAndSave = function () {\n\t        for (var _i = 0, _a = this._stateService.getPages(); _i < _a.length; _i++) {\n\t            var page = _a[_i];\n\t            page.afterRenderLayout = this.createPage(page);\n\t        }\n\t    };\n\t    TemplatingService.prototype.createLayout = function () {\n\t        return this.createjQueryItem('div', undefined, \"container-fluid\");\n\t    };\n\t    TemplatingService.prototype.removeElementFromDOM = function (className) {\n\t        $(className).remove();\n\t    };\n\t    TemplatingService.prototype.createjQueryItem = function (type, attrs, styleClasses, text) {\n\t        var domElement = $(document.createElement(type));\n\t        if (styleClasses) {\n\t            domElement.addClass(styleClasses);\n\t        }\n\t        if (attrs) {\n\t            for (var _i = 0, attrs_1 = attrs; _i < attrs_1.length; _i++) {\n\t                var item = attrs_1[_i];\n\t                domElement.attr(item.key, item.value);\n\t            }\n\t        }\n\t        if (text) {\n\t            domElement.html(text);\n\t        }\n\t        return domElement;\n\t    };\n\t    return TemplatingService;\n\t}());\n\texports.TemplatingService = TemplatingService;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar SystemService = (function () {\n\t    function SystemService(templatingService, stateService) {\n\t        this._templatingService = templatingService;\n\t        this._stateService = stateService;\n\t    }\n\t    SystemService.prototype.removeCurrentPageFromScreen = function () {\n\t        this._templatingService.removeElementFromDOM(\".container-fluid\");\n\t    };\n\t    SystemService.prototype.goPage = function (name) {\n\t        this.removeCurrentPageFromScreen();\n\t        for (var _i = 0, _a = this._stateService.getPages(); _i < _a.length; _i++) {\n\t            var page = _a[_i];\n\t            if (page.name === name) {\n\t                $(\".emulator\").prepend(page.afterRenderLayout);\n\t                this.renewCurrentPage(page.name);\n\t            }\n\t        }\n\t    };\n\t    SystemService.prototype.renderAllPages = function (page) {\n\t        if (page) {\n\t            var page1 = this._templatingService.createPage(page);\n\t            this._stateService.getPage(page.name).afterRenderLayout = page1;\n\t        }\n\t        else {\n\t            this._templatingService.createPagesAndSave();\n\t        }\n\t    };\n\t    SystemService.prototype.goStartPage = function () {\n\t        this.goPage(this._stateService.getStartPageName());\n\t    };\n\t    SystemService.prototype.renewCurrentPage = function (name) {\n\t        this._stateService.setCurrentPageName(name);\n\t    };\n\t    SystemService.prototype.startEmulator = function () {\n\t        var _this = this;\n\t        var backgroundDIV = this._templatingService.createjQueryItem(\"div\", undefined, \"splashScreen\");\n\t        var brand = this._templatingService.createjQueryItem(\"p\", undefined, \"brand\", \"Loading\");\n\t        $(\".emulator\").append(backgroundDIV);\n\t        backgroundDIV.append(brand);\n\t        backgroundDIV.fadeIn('slow', function () {\n\t            brand.fadeIn('slow')\n\t                .fadeOut('slow')\n\t                .fadeIn('slow', function () {\n\t                _this.hideSplashScreen();\n\t                _this.renderAllPages();\n\t                _this.goStartPage();\n\t            });\n\t        });\n\t    };\n\t    SystemService.prototype.hideSplashScreen = function () {\n\t        $(\".splashScreen\").fadeOut('slow').remove();\n\t    };\n\t    SystemService.prototype.showNotification = function (text) {\n\t        var noticeDIV = this._templatingService.createjQueryItem(\"div\", undefined, \"bg-danger\", text);\n\t        $(\".emulator\").prepend(noticeDIV);\n\t        setTimeout(function () {\n\t            noticeDIV.fadeOut('slow').remove();\n\t        }, 2000);\n\t    };\n\t    return SystemService;\n\t}());\n\texports.SystemService = SystemService;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar ActionService = (function () {\n\t    function ActionService(systemService) {\n\t        this._systemService = systemService;\n\t    }\n\t    ActionService.prototype.goPage = function (name) {\n\t        this._systemService.goPage(name);\n\t    };\n\t    ActionService.prototype.showNotification = function (words) {\n\t        this._systemService.showNotification(words);\n\t    };\n\t    ActionService.prototype.saveToLocalStorage = function (key, value) {\n\t        localStorage.setItem(key, value);\n\t    };\n\t    ActionService.prototype.getFromLocalStorage = function (key) {\n\t        return localStorage.getItem(key);\n\t    };\n\t    ActionService.prototype.reRenderPage = function (page) {\n\t        this._systemService.renderAllPages(page);\n\t    };\n\t    ActionService.prototype.callYelpSearchAPI = function (keywords, callback) {\n\t        var auth = {\n\t            consumerKey: \"sNul62e6H0We5KJLGYP_Bw\",\n\t            consumerSecret: \"RxvIBp4BxRvNVxjaPlUWuiPFcYg\",\n\t            accessToken: \"nguVll4te_e1oDcv2EkS4xKC6GOoQhcN\",\n\t            accessTokenSecret: \"DrumlhFl5Kwb1ksCpRKEtiW6B58\",\n\t            serviceProvider: {\n\t                signatureMethod: \"HMAC-SHA1\"\n\t            }\n\t        };\n\t        var terms = keywords;\n\t        var near = 'Dunedin';\n\t        var accessor = {\n\t            consumerSecret: auth.consumerSecret,\n\t            tokenSecret: auth.accessTokenSecret\n\t        };\n\t        var parameters = [];\n\t        parameters.push(['term', terms]);\n\t        parameters.push(['location', near]);\n\t        parameters.push(['callback', 'cb']);\n\t        parameters.push(['oauth_consumer_key', auth.consumerKey]);\n\t        parameters.push(['oauth_consumer_secret', auth.consumerSecret]);\n\t        parameters.push(['oauth_token', auth.accessToken]);\n\t        parameters.push(['oauth_signature_method', 'HMAC-SHA1']);\n\t        var message = {\n\t            'action': 'https://api.yelp.com/v2/search',\n\t            'method': 'GET',\n\t            'parameters': parameters\n\t        };\n\t        OAuth.setTimestampAndNonce(message);\n\t        OAuth.SignatureMethod.sign(message, accessor);\n\t        var parameterMap = OAuth.getParameterMap(message.parameters);\n\t        $.ajax({\n\t            'url': message.action,\n\t            'data': parameterMap,\n\t            'dataType': 'jsonp',\n\t            'jsonpCallback': 'cb',\n\t            'cache': true\n\t        })\n\t            .done(function (data, textStatus, jqXHR) {\n\t            callback(data.businesses[0]);\n\t        })\n\t            .fail(function (jqXHR, textStatus, errorThrown) {\n\t            console.log('error[' + errorThrown + '], status[' + textStatus + '], jqXHR[' + JSON.stringify(jqXHR) + ']');\n\t        });\n\t    };\n\t    return ActionService;\n\t}());\n\texports.ActionService = ActionService;\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** spec/test.spec.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 536950cfb44d80b9cb4d\n **/","///<reference path=\"../src/emulator/ui/types/jquery.d.ts\" />\n///<reference path=\"typings/jasmine-jquery.d.ts\" />\n\nimport {IStateService} from \"../src/emulator/models/serviceModels/IStateService\";\nimport {ITemplatingService} from \"../src/emulator/models/serviceModels/ITemplatingService\";\nimport {ISystemService} from \"../src/emulator/models/serviceModels/ISystemService\";\nimport {IActionService} from \"../src/emulator/models/serviceModels/IActionService\";\nimport {IPage} from \"../src/emulator/models/dataModels/IPage\";\nimport {IApp} from \"../src/emulator/models/dataModels/IApp\";\nimport {IElement} from \"../src/emulator/models/dataModels/IElement\";\nimport {IListItem} from \"../src/emulator/models/dataModels/IListItem\";\nimport {IFunc} from \"../src/emulator/models/dataModels/IFunction\";\nimport {StateService} from \"../src/emulator/services/StateService\";\nimport {TemplatingService} from \"../src/emulator/services/TemplatingService\";\nimport {SystemService} from \"../src/emulator/services/SystemService\";\nimport {ActionService} from \"../src/emulator/services/ActionService\";\n\njasmine.getFixtures().fixturesPath = \"../spec/\";\n//need to launch Chrome/Chromium with --allow-file-access-from-files option\n//for fixtures to work. Works in standard FireFox.\n//see https://github.com/velesin/jasmine-jquery#cross-domain-policy-problems-under-chrome\n//can load a fixture with loadFixtures('myFixture.html');\n\nclass MockElement implements IElement {\n\ttype;\n    name:string;\n    targetElementID:string;\n    define:string|Array<IListItem>;\n}\nlet aMockElement = new MockElement();\naMockElement.type = \"text\";\naMockElement.name = \"testName\";\nlet testText: string = \"Some text to test with\";\naMockElement.define = testText;\n\nclass MockPage implements IPage {\n\tname: string; \n\trawLayout:Array<IElement>;\n\tafterRenderLayout: JQuery;\n\tcallback:Array<IFunc>;\n}\nlet page1 = new MockPage();\npage1.name = \"page1\";\npage1.rawLayout = [aMockElement];\nlet page2 = new MockPage();\npage2.name = \"page2\";\n\nlet pageName: string = \"page1\";\nlet appTitle: string = \"Title\";\nclass MockApp implements IApp {\n    title:string = appTitle;\n    currentPageName:string = pageName;\n    startPageName:string = pageName;\n    pages:Array<IPage> = [page1, page2];\n    injectActionService(as:IActionService) {};\n    startAddingPages() {};\n    CentralCallbackFunc(pageName:string, elementID?:string) {};\n}\nlet myMockApp = new MockApp();\n\ndescribe('Tests for StateService', () => {\n    let testStateService: StateService = new StateService(myMockApp);  \n    it('getStartPageName() should return the specified string', () => {\n        let startPageName: string  = testStateService.getStartPageName();\n        expect(startPageName).toEqual(pageName);\n    });\n    it('getCurrentPageName() should return the correct string', () => {\n        let currentPageName: string = testStateService.getCurrentPageName();\n        expect(currentPageName).toEqual(pageName);\n    });\n    it('setCurrentPageName() should set the name of the current page', () => {\n    \tlet newName :string = \"New Name\";\n    \ttestStateService.setCurrentPageName(newName);\n        let currentPageName: string = testStateService.getCurrentPageName();\n        expect(currentPageName).toEqual(newName);\n        testStateService.setCurrentPageName(pageName); \n        //as \"new name\" is not actually a page\n    });\n    it(\"getCurrentPage() should return an IPage object of the current page\", () => {\n    \tlet currentPage: IPage = testStateService.getCurrentPage();\n    \texpect(currentPage.name).toEqual(\"page1\");\n    });\n    it(\"getPage() should return an IPage object with the specified name\", () => {\n    \tlet page: IPage = testStateService.getPage(\"page2\");\n    \texpect(page.name).toEqual(\"page2\");\n    });\n    it(\"getPage() should return undefined if a string that does not match\" +\n    \t\" an existing page name is passed to it\", () => {\n    \tlet page: IPage = testStateService.getPage(\"page3\");\n    \texpect(page).toEqual(undefined);\n    });\n    it(\"getPages() should return an array of all the pages the app contains\", () => {\n    \tlet pages: Array<IPage> = testStateService.getPages();\n    \texpect(pages).toEqual([page1, page2]);\n    });\n    it(\"emulatorCentralCallBack() to call CentralCallbackFunc()\", () => {\n    \tspyOn(myMockApp, 'CentralCallbackFunc');\n    \ttestStateService.emulatorCentralCallBack(aMockElement);\n    \texpect(myMockApp.CentralCallbackFunc).toHaveBeenCalledWith(page1.name, \"testName\");\n    \ttestStateService.emulatorCentralCallBack(aMockElement, \"test\");\n    \texpect(myMockApp.CentralCallbackFunc).toHaveBeenCalledWith(page1.name, \"testName\", \"test\");\n    });\n    it(\"getAppCallBack() should return the correct function\", () => {\n    \tlet fn = testStateService.getAppCallBack();\n    \texpect(fn(\"test\", \"test\")).toEqual(myMockApp.CentralCallbackFunc(\"test\", \"test\"));\n    })\n});\n\nclass MockStateService implements IStateService{\n    _app:IApp = myMockApp;\n    getCurrentPage():IPage {return page1};\n    getCurrentPageName():string {return page1.name};\n    getStartPageName():string {return page1.name};\n    setCurrentPageName(name:string) {page1.name = name};\n    getPages():Array<IPage> {return myMockApp.pages};\n    getPage(name:string ):IPage {return page1};\n    getAppCallBack:(element:IElement,targetElementInfo?:string) => void;\n    emulatorCentralCallBack(element:IElement,targetElementInfo?:string) {};\n}\nlet myMockStateService = new MockStateService();\n\ndescribe('Tests for TemplatingService', () => {\n\tlet testTemplatingService: TemplatingService = new TemplatingService(myMockStateService);\n\tdescribe('createPage() should return a jQuery object', () => {\n\t\tlet testPage = new MockPage();\n\t\ttestPage.name = \"testPage\";\n\t\tit('that for button type contains right ID, classes, definition', () => {\n\t\t\tlet buttonElement = new MockElement();\n\t\t\tbuttonElement.type = \"button\"; buttonElement.name = \"buttonElement\";\n\t    \tbuttonElement.define = \"buttonElementDefinition\";\n\t    \ttestPage.rawLayout = [buttonElement];\n\t    \tlet aJQObject: JQuery  = testTemplatingService.createPage(testPage);\n\t    \texpect($(\"button\", aJQObject).attr(\"id\")).toEqual(buttonElement.name);\n\t    \texpect($(\".btn\", aJQObject)).toHaveText(<string>buttonElement.define);\n\t    });\n\t    it('that for text type contains right ID, p and text elements', () => {\n\t    \tlet textElement = new MockElement();\n\t    \ttextElement.type = \"text\"; textElement.name = \"textElement\";\n\t    \ttextElement.define = \"textElementDefinition\";\n\t    \ttestPage.rawLayout = [textElement];\n\t        let aJQObject: JQuery  = testTemplatingService.createPage(testPage);\n\t        expect($(\"#textElement\", aJQObject)).toExist();\n\t        expect($(\"p\", aJQObject)).toHaveText(<string>textElement.define);\n\t    });\n\t    it('that for image type contains right ID, class, img attr and img source', () => {\n\t    \tlet imageElement = new MockElement();\n\t    \timageElement.type = \"image\"; imageElement.name = \"imageElement\";\n\t    \timageElement.define = \"imageElementDefinition\";\n\t    \ttestPage.rawLayout = [imageElement];\n\t    \tlet aJQObject: JQuery  = testTemplatingService.createPage(testPage);\n\t    \texpect($(\"#imageElement\", aJQObject)).toExist();\n\t    \texpect($(\".img-fluid\", aJQObject)).toExist();\n\t        expect($(\"img\", aJQObject).attr(\"src\")).toEqual(imageElement.define);\n\t    });\n\t    it('that for input type contains the right classes, attributes and text', () => {\n\t    \tlet inputElement = new MockElement();\n\t    \tinputElement.type = \"input\"; inputElement.name = \"inputElement\";\n\t    \tinputElement.define = \"inputElementDefinition\";\n\t    \ttestPage.rawLayout = [inputElement];\n\t    \tlet aJQObject: JQuery  = testTemplatingService.createPage(testPage);\n\t    \texpect($(\".form-group\", aJQObject)).toExist();\n\t    \texpect($(\".sr-only\", aJQObject)).toExist();\n\t    \texpect($(\".form-control\", aJQObject)).toExist();\n\t    \texpect($(\"label\", aJQObject).attr(\"for\")).toEqual(inputElement.name);\n\t    \texpect($(\"input\", aJQObject).attr(\"type\")).toEqual(\"text\");\n\t    \texpect($(\"input\", aJQObject).attr(\"id\")).toEqual(inputElement.name);\n\t    \texpect($(\"input\", aJQObject).attr(\"for\")).toEqual(inputElement.name);\n\t    \texpect($(\"input\", aJQObject).attr(\"placeholder\")).toEqual(inputElement.define);\n\t    \texpect($(\"input\", aJQObject)).toHaveText(<string>inputElement.define);\n\t    });\n\t    it('that for list type contains the right classes and descriptions', () => {\n\t    \tlet listElement = new MockElement();\n\t    \tlistElement.type = \"list\"; listElement.name = \"listElement\";\n\t    \tlistElement.define = \n\t    \t[{title: \"item1\", description: \"item1Desc\", url: \"item1url\"},\n\t    \t {title: \"item2\", description: \"item2Desc\", url: \"item2url\"}];\n\t    \ttestPage.rawLayout = [listElement];\n\t    \tlet aJQObject: JQuery  = testTemplatingService.createPage(testPage);\n\t    \texpect($(\".list-group\", aJQObject)).toExist();\n\t    \texpect($(\"h5\", aJQObject)).toHaveHtml(\"item1\");\n\t    \texpect($(\"h5:nth(1)\", aJQObject)).toHaveHtml(\"item2\");\n\t    \texpect($(\"p\", aJQObject)).toHaveHtml(\"item1Desc\");\n\t    \texpect($(\"p:nth(1)\", aJQObject)).toHaveHtml(\"item2Desc\");\n\t    \t//console.log($(\"h5:nth(1)\", aJQObject)[0].outerHTML);\n\t    });\n\t});\n    it('createPagesAndSave() should call createPage the right number of times', () => {\n    \tspyOn(testTemplatingService, 'createPage');\n    \ttestTemplatingService.createPagesAndSave();\n        expect(testTemplatingService.createPage.calls.count()).toBe(2);\n    });\n    it('createLayout() should return a jQuery object with a div of class conatiner-fluid', () => {\n    \tlet aJQObject: JQuery  = testTemplatingService.createLayout();\n        expect($(aJQObject)).toHaveClass(\"container-fluid\");\n    \texpect($(aJQObject)).toEqual(\"div\");\n    });\n    it('removeElementFromDOM() should remove the specified element from the DOM', () => {\n    \tsetFixtures(\"<div class='container-fluid'></div>\");\n    \texpect($(\".container-fluid\")).toExist();\n        testTemplatingService.removeElementFromDOM(\".container-fluid\");\n        expect($(\".container-fluid\")).not.toExist();\n    });\n    it('createjQueryItem() should return the correct jQuery object', () => {\n    \tlet aJQItem: JQuery = testTemplatingService.createjQueryItem(\"div\",\n    \t\t [{key:\"id\", value:\"testID\"}], \"testClass\", \"testString\");\n        //Note that for below, don't need a selector, as the object is just one element.\n        //When passing a selector and context, only searches within that context, not including\n        //the parent, so $(#testID, aJQItem) will return an empty jQuery object\n        expect($(aJQItem)).toHaveId(\"testID\");\n        expect($(aJQItem)).toHaveClass(\"testClass\");\n        //below is just a reminder on how to see the actual html for debugging as needed\n        //expect(aJQItem[0].outerHTML).toHaveId(\"testID\");\n    });\n});\n\nclass MockTemplatingService implements ITemplatingService{\n\t_stateService:IStateService;\n    createPage(page:IPage):JQuery {return $(document.createElement(\"div\"))\n    \t\t\t\t\t\t\t\t\t\t\t\t.addClass(\"testingClass\")};\n    createPagesAndSave() {};\n    createLayout():JQuery {return $(document.createElement(\"div\"))};\n    removeElementFromDOM(className:string) {};\n    createjQueryItem(type:string,\n                     attrs?:Array<{key:string,value:string}>,\n                     styleClasses?:string,\n                     text?:string): JQuery {return $(document.createElement(\"div\"))\n    \t\t\t\t\t\t\t\t\t\t\t\t.addClass(\"testingClass\")};\n}\n\nlet myMockTemplatingService = new MockTemplatingService();\n\ndescribe('Tests for SystemService method', () => {\n\tlet testSystemService: SystemService = new SystemService(myMockTemplatingService, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t myMockStateService); \n\tit('removeCurrentPageFromScreen() should remove the current page from the DOM', () => {\n    \tspyOn(myMockTemplatingService, \"removeElementFromDOM\");\n    \ttestSystemService.removeCurrentPageFromScreen();\n    \texpect(myMockTemplatingService.removeElementFromDOM)\n    \t\t\t\t\t.toHaveBeenCalledWith(\".container-fluid\");\n    });\n\tit('goPage() should remove the current page, and show the new one', () => {\n\t\tpage2.afterRenderLayout = $(document.createElement(\"div\")).addClass(\"second\")\n\t\tsetFixtures(\"<div class='emulator'></div>\");\n\t\texpect($(\".second\")).not.toExist();\n        spyOn(testSystemService, \"removeCurrentPageFromScreen\");\n        spyOn(testSystemService, \"renewCurrentPage\");\n        testSystemService.goPage(\"page2\");\n        expect(testSystemService.removeCurrentPageFromScreen).toHaveBeenCalled();\n        expect(testSystemService.renewCurrentPage).toHaveBeenCalledWith(\"page2\");\n        expect($(\".second\")).toExist();\n    });\n    describe('renderAllPages() should', () => {\n\t    it('if called with a page, should rerender the page', () => {\n            spyOn(myMockTemplatingService, \"createPage\").and.callThrough();\n            spyOn(myMockStateService, \"getPage\").and.callThrough();\n            expect($(page1.afterRenderLayout)).not.toExist();\n            testSystemService.renderAllPages(page1);\n            expect(myMockTemplatingService.createPage).toHaveBeenCalledWith(page1);\n            expect(myMockStateService.getPage).toHaveBeenCalledWith(page1.name);\n            expect($(page1.afterRenderLayout)).toExist();\n\t    });\n\t    it('if called with no arguments, call createPagesAndSave()', () => {\n\t    \tspyOn(myMockTemplatingService, \"createPagesAndSave\");\n\t    \ttestSystemService.renderAllPages();\n\t    \texpect(myMockTemplatingService.createPagesAndSave).toHaveBeenCalledWith();\n\t    });\n    });\n    it('goStartPage() should call getStartPageName and goPage', () => {\n    \t//this.goPage(this._stateService.getStartPageName());\n    \tspyOn(myMockStateService, \"getStartPageName\");\n    \tspyOn(testSystemService, \"goPage\");\n    \ttestSystemService.goStartPage();\n    \texpect(myMockStateService.getStartPageName).toHaveBeenCalled();\n    \texpect(testSystemService.goPage).toHaveBeenCalled();\n    });\n    it('renewCurrentPage() should call setCurrentPageName from StateService', () => {\n        spyOn(myMockStateService, \"setCurrentPageName\");\n        testSystemService.renewCurrentPage(\"testName\");\n        expect(myMockStateService.setCurrentPageName)\n        \t\t\t\t\t\t .toHaveBeenCalledWith(\"testName\");\t\n    });\n    it('startEmulator() should call hideSplashScreen,' + \n    \t\t'renderAllPages and goStartPage', (done) => {\n    \tspyOn(testSystemService, \"hideSplashScreen\");\n    \tspyOn(testSystemService, \"renderAllPages\");\n    \tspyOn(testSystemService, \"goStartPage\");\n    \ttestSystemService.startEmulator();\n\n    \tlet POLL_TIME = 10;\n    \tlet endTime = new Date().getTime() + 10000;\n    \tlet checkCondition = () => {\n        \tif (new Date().getTime() <= endTime && \n        \t\ttestSystemService.goStartPage.calls.count() < 1) {\n            \tsetTimeout(checkCondition, POLL_TIME);\n            } else {   \n\t\t    \texpect(testSystemService.hideSplashScreen).toHaveBeenCalled();\n\t\t    \texpect(testSystemService.renderAllPages).toHaveBeenCalled();\n\t\t    \texpect(testSystemService.goStartPage).toHaveBeenCalled();\n                done();\n            }\n        };\n        checkCondition();\n    }, 10000);\n    it('hideSplashScreen() should hide the splash screen', () => {\n    \tsetFixtures(\"<div class='splashScreen'></div>\");\n    \texpect($(\".splashScreen\")).toBeVisible();\n        testSystemService.hideSplashScreen();\n        expect($(\".splashScreen\")).not.toBeVisible();\n    });\n    it('showNotification() should show a notification, and then fade it out', (done) => {\n    \tsetFixtures(\"<div class='emulator'></div>\");\n    \texpect($(\".testingClass\")).not.toBeVisible();\n    \ttestSystemService.showNotification(\"blah\");\n    \texpect($(\".testingClass\")).toBeVisible();\n\n    \tlet POLL_TIME = 10;\n    \tlet endTime = new Date().getTime() + 5000;\n    \tlet checkCondition = () => {\n        \tif (new Date().getTime() <= endTime && \n        \t\t$(\".testingClass\").is(\":visible\")) {\n            \tsetTimeout(checkCondition, POLL_TIME);\n            } else {\n\t\t\t\texpect($(\".testingClass\")).not.toBeVisible();\n                done();\n            }\n        };\n        checkCondition();\n    }, 5000);\n});\n\ndescribe('Tests for ActionService', () => {\n\t//don't need a proper mock for SystemService here, as shadowing all its required\n\t//functions with spies\n\tlet myMockSystemService = new SystemService(myMockTemplatingService, myMockStateService);\n\tlet testActionService = new ActionService(myMockSystemService);\n\tit('goPage() should call goPage from SystemService', () => {\n\t\tspyOn(myMockSystemService, \"goPage\");\n\t\ttestActionService.goPage(\"page1\");\n\t\texpect(myMockSystemService.goPage).toHaveBeenCalledWith(\"page1\");\n    });\n    it('showNotification() should call showNotification from SystemService', () => {\n    \tspyOn(myMockSystemService, \"showNotification\");\n\t\ttestActionService.showNotification(\"showNotification\");\n\t\texpect(myMockSystemService.showNotification).toHaveBeenCalledWith(\"showNotification\");\n    });\n    it('reRenderPage() should renderAllPages from SystemService', () => {\n    \tspyOn(myMockSystemService, \"renderAllPages\");\n\t\ttestActionService.reRenderPage(page1);\n\t\texpect(myMockSystemService.renderAllPages).toHaveBeenCalledWith(page1);\n    });\n});\n\n\n/** WEBPACK FOOTER **\n ** ../spec/test.spec.ts\n **/","import {IStateService} from \"../models/serviceModels/IStateService\";\nimport {IPage} from \"../models/dataModels/IPage\";\nimport {IApp} from \"../models/dataModels/IApp\";\nimport {IElement} from \"../models/dataModels/IElement\";\n\n\nexport class StateService implements IStateService {\n    _app: IApp;\n\n    /**\n     * [constructor description]\n     * @method constructor\n     * @param  {IApp}      app [description]\n     * @return {[type]}        [description]\n     */\n    constructor(app: IApp) {\n        this._app = app;\n    }\n\n    getStartPageName(): string {\n        return this._app.startPageName;\n    }\n\n    getCurrentPageName(): string {\n        return this._app.currentPageName;\n    }\n\n    setCurrentPageName(name: string) {\n        this._app.currentPageName = name;\n    }\n\n    getCurrentPage(): IPage {\n        let targetName: string = this._app.currentPageName;\n        let returnPage: IPage;\n        for (let page of this._app.pages) {\n            if (page.name === targetName) {\n                returnPage = page;\n                break;\n            }\n        }\n        return returnPage;\n    }\n\n    getPage(name: string): IPage {\n        let returnPage: IPage;\n        for (let page of this._app.pages) {\n            if (page.name === name) {\n                returnPage = page;\n                break;\n            }\n        }\n        return returnPage;\n    }\n\n    getPages(): Array<IPage> {\n        return this._app.pages;\n    }\n\n    emulatorCentralCallBack(element: IElement, targetElementInfo?: string) {\n        let currentPageName:string = this.getStartPageName();\n        if (targetElementInfo) {\n            this._app.CentralCallbackFunc(currentPageName, element.name, targetElementInfo);\n        } else {\n            this._app.CentralCallbackFunc(currentPageName, element.name);\n        }\n    }\n\n    getAppCallBack(): (pageName: string, elementID?: string) => void {\n        return this._app.CentralCallbackFunc;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./emulator/services/StateService.ts\n **/","///<reference path=\"../ui/types/jquery.d.ts\" />\n\nimport {IPage} from '../models/dataModels/IPage'\nimport {ITemplatingService} from \"../models/serviceModels/ITemplatingService\";\nimport {IElement} from \"../models/dataModels/IElement\";\nimport {IStateService} from \"../models/serviceModels/IStateService\";\nimport {IListItem} from \"../models/dataModels/IListItem\";\n\nexport class TemplatingService implements ITemplatingService {\n    _stateService: IStateService;\n\n    /**\n     * [constructor description]\n     * @method constructor\n     * @param  {IStateService} stateService [description]\n     * @return {[type]}                     [description]\n     */\n    constructor(stateService: IStateService) {\n        this._stateService = stateService;\n    }\n\n    createPage(page: IPage): JQuery {\n        let outDiv: JQuery = this.createLayout();\n\n        for (let element1 of page.rawLayout){\n            let row = this.createjQueryItem(\"div\",\n                undefined,\n                \"row\",\n                undefined);\n            let element:IElement = element1;\n            switch (element.type) {\n                case \"button\":\n                    let temp = this.createjQueryItem(\"button\",\n                        [{key:\"id\", value:element.name}],\n                        \"btn btn-primary btn-lg btn-block\",\n                        <string>element.define);\n                    if (element.targetElementID) {\n                        $(\".emulator\").on(\n                            'click',\n                            \"#\"+element.name,\n                            ()=>{\n                                let targetText = $(\"#\"+element.targetElementID).val();\n                                this._stateService.emulatorCentralCallBack(element,targetText);\n                            });\n                    } else {\n                        $(\".emulator\").on(\n                            'click',\n                            \"#\"+element.name,\n                            ()=>{\n                                this._stateService.emulatorCentralCallBack(element);\n                            });\n                    }\n                    row.append(temp);\n                    break;\n                case \"text\":\n                    let temp1 = this.createjQueryItem(\"p\",\n                        [{key:\"id\", value:element.name}],\n                        undefined,\n                        <string>element.define);\n                    row.append(temp1);\n                    break;\n                case \"image\":\n                    let temp2 = this.createjQueryItem(\"img\",\n                        [{key:\"id\", value:element.name}, {key:\"src\", value:<string>element.define}],\n                        \"img-fluid\");\n                    row.append(temp2);\n                    break;\n                case \"input\":\n                    let temp3 = this.createjQueryItem(\"div\", undefined, \"form-group\");\n\n                    let label = this.createjQueryItem(\"label\",\n                        [{key:\"for\", value:element.name}],\n                        \"sr-only\",\n                        <string>element.define);\n                    temp3.append(label);\n\n                    let input = this.createjQueryItem(\"input\",\n                        [{key:\"type\", value:\"text\"}, {key:\"id\", value:element.name}, {key:\"for\", value:element.name}, {key:\"placeholder\", value:<string>element.define}],\n                        \"form-control\",\n                        <string>element.define);\n                    temp3.append(input);\n                    row.append(temp3);\n                    break;\n                case \"list\":\n                    let listGroup = this.createjQueryItem(\"div\", undefined, \"list-group\");\n                    let listItemsData = <Array<IListItem>>(element.define);\n                    for (let item of listItemsData){\n                        let a = this.createjQueryItem(\"a\",\n                            undefined,\n                            \"list-group-item list-group-item-action\");\n                        $(\".emulator\").on(\n                            'click',\n                            \"#\"+element.name,\n                            ()=>{\n                                this._stateService.emulatorCentralCallBack(element,item.url);\n                            });\n                        let h5 = this.createjQueryItem(\"h5\",\n                            undefined,\n                            \"list-group-item-heading\",\n                            item.title);\n                        let p = this.createjQueryItem(\"p\",\n                            undefined,\n                            \"list-group-item-text\",\n                            item.description);\n                        a.append(h5);\n                        a.append(p);\n                        listGroup.append(a);\n                    }\n                    row.append(listGroup);\n                    break;\n            }\n            outDiv.append(row);\n        }\n\n        return outDiv;\n    }\n\n    createPagesAndSave() {\n        for (let page of this._stateService.getPages()){\n            page.afterRenderLayout = this.createPage(page);\n        }\n    }\n\n    createLayout(): JQuery {\n        return this.createjQueryItem('div', undefined, \"container-fluid\");\n    }\n\n    removeElementFromDOM(className: string) {\n        $(className).remove();\n    }\n\n    createjQueryItem(type: string,\n                     attrs?: Array<{key: string,value: string}>,\n                     styleClasses?: string,\n                     text?: string): JQuery {\n        let domElement = $(document.createElement(type));\n        if (styleClasses) {\n            domElement.addClass(styleClasses);\n        }\n        if (attrs) {\n            for (let item of attrs){\n                domElement.attr(item.key, item.value);\n            }\n        }\n\n        if (text) {\n            domElement.html(text);\n        }\n        return domElement;\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./emulator/services/TemplatingService.ts\n **/","import {ISystemService} from \"../models/serviceModels/ISystemService\";\nimport {IApp} from \"../models/dataModels/IApp\";\nimport {IPage} from \"../models/dataModels/IPage\";\nimport {IStateService} from \"../models/serviceModels/IStateService\";\nimport {ITemplatingService} from \"../models/serviceModels/ITemplatingService\";\n\nexport class SystemService implements ISystemService{\n    _templatingService: ITemplatingService;\n    _stateService: IStateService;\n\n    /**\n     * [constructor description]\n     * @method constructor\n     * @param  {ITemplatingService} templatingService [description]\n     * @param  {IStateService}      stateService      [description]\n     * @return {[type]}                               [description]\n     */\n    constructor(templatingService: ITemplatingService, stateService: IStateService) {\n        this._templatingService = templatingService;\n        this._stateService = stateService;\n    }\n\n    removeCurrentPageFromScreen() {\n        this._templatingService.removeElementFromDOM(\".container-fluid\");\n    }\n\n    goPage(name: string) {\n        this.removeCurrentPageFromScreen();\n        for (let page of this._stateService.getPages()){\n            if (page.name === name){\n                $(\".emulator\").prepend(page.afterRenderLayout);\n                this.renewCurrentPage(page.name);\n            }\n        }\n    }\n\n    renderAllPages(page?:IPage){\n        if (page){\n            let page1:JQuery = this._templatingService.createPage(page);\n            this._stateService.getPage(page.name).afterRenderLayout = page1;\n        } else {\n            this._templatingService.createPagesAndSave();\n        }\n    }\n\n    goStartPage() {\n        this.goPage(this._stateService.getStartPageName());\n    }\n\n    renewCurrentPage(name: string) {\n        this._stateService.setCurrentPageName(name);\n    }\n\n    startEmulator() {\n        let backgroundDIV = this._templatingService.createjQueryItem(\"div\",undefined,\"splashScreen\");\n        let brand = this._templatingService.createjQueryItem(\"p\",undefined,\"brand\",\"Loading\");\n        $(\".emulator\").append(backgroundDIV);\n        backgroundDIV.append(brand);\n        backgroundDIV.fadeIn('slow',()=>{\n            brand.fadeIn('slow')\n                .fadeOut('slow')\n                .fadeIn('slow',()=>{\n                    this.hideSplashScreen();\n                    this.renderAllPages();\n                    this.goStartPage();\n                });\n        });\n    }\n\n    hideSplashScreen(){\n        $(\".splashScreen\").fadeOut('slow').remove();\n    }\n\n    showNotification(text:string) {\n        let noticeDIV = this._templatingService.createjQueryItem(\"div\", undefined, \"bg-danger\", text);\n        $(\".emulator\").prepend(noticeDIV);\n        setTimeout(()=>{\n            noticeDIV.fadeOut('slow').remove();\n        },2000);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./emulator/services/SystemService.ts\n **/","import {IActionService} from \"../models/serviceModels/IActionService\";\nimport {ISystemService} from \"../models/serviceModels/ISystemService\";\nimport {IPage} from \"../models/dataModels/IPage\";\n\ndeclare var OAuth:any;\n\nexport class ActionService implements IActionService{\n    _systemService: ISystemService;\n\n    /**\n     * [constructor description]\n     * @method constructor\n     * @param  {ISystemService} systemService [description]\n     * @return {[type]}                       [description]\n     */\n    constructor(systemService: ISystemService) {\n        this._systemService = systemService;\n    }\n\n    goPage(name: string) {\n        this._systemService.goPage(name);\n    }\n\n    showNotification(words: string) {\n        this._systemService.showNotification(words);\n    }\n\n    saveToLocalStorage(key: string, value: string) {\n        localStorage.setItem(key,value);\n    }\n\n    getFromLocalStorage(key: string): string {\n        return localStorage.getItem(key);\n    }\n\n    reRenderPage(page:IPage){\n        this._systemService.renderAllPages(page);\n    }\n\n    callYelpSearchAPI(keywords:string, callback:Function){\n        let auth = {\n            consumerKey : \"sNul62e6H0We5KJLGYP_Bw\",\n            consumerSecret : \"RxvIBp4BxRvNVxjaPlUWuiPFcYg\",\n            accessToken : \"nguVll4te_e1oDcv2EkS4xKC6GOoQhcN\",\n            accessTokenSecret : \"DrumlhFl5Kwb1ksCpRKEtiW6B58\",\n            serviceProvider : {\n                signatureMethod : \"HMAC-SHA1\"\n            }\n        };\n\n        let terms = keywords;\n        let near = 'Dunedin';\n        //let category = 'restaurants,food'\n\n        let accessor = {\n            consumerSecret : auth.consumerSecret,\n            tokenSecret : auth.accessTokenSecret\n        };\n\n        let parameters = [];\n        parameters.push(['term', terms]);\n        parameters.push(['location', near]);\n        //parameters.push(['category_filter', category]);\n        parameters.push(['callback', 'cb']);\n        parameters.push(['oauth_consumer_key', auth.consumerKey]);\n        parameters.push(['oauth_consumer_secret', auth.consumerSecret]);\n        parameters.push(['oauth_token', auth.accessToken]);\n        parameters.push(['oauth_signature_method', 'HMAC-SHA1']);\n\n        let message = {\n            'action' : 'https://api.yelp.com/v2/search',\n            'method' : 'GET',\n            'parameters' : parameters\n        };\n\n\n\n        OAuth.setTimestampAndNonce(message);\n        OAuth.SignatureMethod.sign(message, accessor);\n\n        let parameterMap = OAuth.getParameterMap(message.parameters);\n\n        $.ajax({\n            'url' : message.action,\n            'data' : parameterMap,\n            'dataType' : 'jsonp',\n            'jsonpCallback' : 'cb',\n            'cache': true\n        })\n        .done((data, textStatus, jqXHR) => {\n                callback(data.businesses[0]);\n            }\n        )\n        .fail((jqXHR, textStatus, errorThrown) => {\n                console.log('error[' + errorThrown + '], status[' + textStatus + '], jqXHR[' + JSON.stringify(jqXHR) + ']');\n            }\n        );\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./emulator/services/ActionService.ts\n **/"],"sourceRoot":""}